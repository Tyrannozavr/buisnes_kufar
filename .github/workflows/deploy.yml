name: Deploy to production

on:
  push:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Настройка SSH
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          ssh-keyscan -H ${{ secrets.SERVER_IP }} >> ~/.ssh/known_hosts
          echo "Host target-server" >> ~/.ssh/config
          echo "  HostName ${{ secrets.SERVER_IP }}" >> ~/.ssh/config
          echo "  User root" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_ed25519" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Pre-cache Docker images with retries
        run: |
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
          echo "🔹 Предзагрузка Docker-образов с повторами..."
          for image in nginx:1.25 python:3.12-slim node:20-slim; do
            for i in {1..3}; do
              if docker pull $image; then
                echo "✅ Успешно загружен $image"
                break
              else
                echo "⚠️ Попытка $i/3 не удалась для $image"
                if [ $i -eq 3 ]; then
                  echo "❌ Не удалось загрузить $image после 3 попыток"
                  # Не выходим с ошибкой, так как образы могут быть пересобраны
                fi
                sleep 5
              fi
            done
          done
          EOF

      - name: Deploy with validation and rollback
        run: |
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
          set -e
          cd buisnes_kufar
          
          # Check for changes
          git fetch origin
          if git diff --quiet HEAD origin/master; then
            echo "✅ No new changes. Exiting."
            exit 0
          fi
          
          # Create rollback point
          current_commit=$(git rev-parse HEAD)
          echo "Rollback point: $current_commit"
          
          # Apply changes
          git reset --hard origin/master
          
          # Ensure .env files exist
          if [ ! -f "./backend/.env" ]; then
            echo "⚠️ backend/.env not found, creating from template"
            cp ./backend/.env.example ./backend/.env
          fi
          
          if [ ! -f "./frontend/.env" ]; then
            echo "⚠️ frontend/.env not found, creating from template"
            cp ./frontend/.env.example ./frontend/.env
          fi
          
          # Clean old containers
          docker compose down || true
          
          # Build and run with health checks
          echo "🛠 Building and starting containers..."
          if docker compose build --no-cache && docker compose up -d nginx; then
            # Wait for containers to initialize
            sleep 30
            
            # Check container status with retries
            REQUIRED_CONTAINERS="backend frontend nginx db"
            failed=false
            
            for container in $REQUIRED_CONTAINERS; do
              for i in {1..5}; do
                if [ "$(docker compose ps -q $container)" ] && \
                   [ "$(docker inspect -f '{{.State.Running}}' $(docker compose ps -q $container))" = "true" ]; then
                  echo "✅ Container $container is running"
                  break
                else
                  if [ $i -eq 5 ]; then
                    echo "❌ Container $container failed to start after 5 attempts"
                    docker compose logs $container
                    failed=true
                  else
                    echo "⚠️ Container $container not ready, attempt $i/5"
                    sleep 10
                  fi
                fi
              done
            done
            
            if [ "$failed" = true ]; then
              echo "❌ Not all containers started! Rolling back..."
              git reset --hard $current_commit
              docker compose down
              docker compose up -d nginx
              exit 1
            fi
          else
            echo "❌ Build/start failed! Rolling back..."
            git reset --hard $current_commit
            docker compose down
            docker compose up -d nginx
            exit 1
          fi
          EOF

      - name: Clean up old images
        if: always()  # Очищаем всегда, даже если предыдущие шаги упали
        run: |
          ssh -o BatchMode=yes -o StrictHostKeyChecking=no root@${{ secrets.SERVER_IP }} << 'EOF'
          echo "🧹 Очистка неиспользуемых Docker образов..."
          docker system prune -af --volumes || true
          echo "✅ Очистка завершена."
          EOF