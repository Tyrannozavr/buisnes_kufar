name: Deploy to production

on:
  push:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ SSH (–æ–ø—Ç–∏–º–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.SERVER_IP }} ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkm5YLr4GqQd6k1P1n1uUVUjOZiVXyZpeYzi2NABqXZNZg8X1u8uW2/2QY=" >> ~/.ssh/known_hosts
          echo "Host target-server" > ~/.ssh/config
          echo "  HostName ${{ secrets.SERVER_IP }}" >> ~/.ssh/config
          echo "  User root" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_ed25519" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Check for changes
        id: check-changes
        run: |
          changes=$(ssh target-server "cd buisnes_kufar && git fetch origin && git diff --name-only HEAD origin/master")
          if [ -z "$changes" ]; then
            echo "::set-output name=has_changes::false"
            echo "‚úÖ No changes detected"
          else
            echo "::set-output name=has_changes::true"
            echo "üî¥ Changes detected:"
            echo "$changes"
          fi

      - name: Deploy application
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          ssh target-server << 'EOF'
          set -e
          cd buisnes_kufar
          
          # Create rollback point
          current_commit=$(git rev-parse HEAD)
          echo "Rollback point: $current_commit"
          
          # Apply changes
          git reset --hard origin/master
          
          # –ü—Ä–æ–≤–µ—Ä–∫–∞ .env —Ñ–∞–π–ª–æ–≤ (—Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç)
          [ -f "./backend/.env" ] || cp ./backend/.env.example ./backend/.env
          [ -f "./frontend/.env" ] || cp ./frontend/.env.example ./frontend/.env
          
          # –û—Å–Ω–æ–≤–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–µ–ø–ª–æ—è (–∫–∞–∫ –≤—ã –¥–µ–ª–∞–µ—Ç–µ –≤—Ä—É—á–Ω—É—é)
          echo "üöÄ Starting deployment with all services..."
          if docker compose up -d --build; then
            echo "‚úÖ All containers started successfully"
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã –≤—Å–µ—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
            echo "üîç Checking container health..."
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ nginx
            for i in {1..10}; do
              if docker compose ps nginx | grep -q "Up"; then
                echo "‚úÖ Nginx is running"
                break
              else
                if [ $i -eq 10 ]; then
                  echo "‚ùå Nginx failed to start after 10 attempts"
                  docker compose logs nginx
                  exit 1
                fi
                sleep 3
              fi
            done
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ backend
            for i in {1..15}; do
              if docker compose ps backend | grep -q "Up"; then
                echo "‚úÖ Backend is running"
                # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ backend –æ—Ç–≤–µ—á–∞–µ—Ç
                if curl -f http://localhost:8000/health 2>/dev/null || curl -f http://localhost:8000/docs 2>/dev/null; then
                  echo "‚úÖ Backend is responding to requests"
                  break
                else
                  if [ $i -eq 15 ]; then
                    echo "‚ùå Backend is running but not responding to requests"
                    docker compose logs backend
                    exit 1
                  fi
                  sleep 3
                fi
              else
                if [ $i -eq 15 ]; then
                  echo "‚ùå Backend failed to start after 15 attempts"
                  docker compose logs backend
                  exit 1
                fi
                sleep 3
              fi
            done
            
            # –ü—Ä–æ–≤–µ—Ä–∫–∞ frontend
            for i in {1..10}; do
              if docker compose ps frontend | grep -q "Up"; then
                echo "‚úÖ Frontend is running"
                break
              else
                if [ $i -eq 10 ]; then
                  echo "‚ùå Frontend failed to start after 10 attempts"
                  docker compose logs frontend
                  exit 1
                fi
                sleep 3
              fi
            done
            
            echo "üéâ All containers are healthy and running!"
            
          else
            echo "‚ùå Deployment failed! Rolling back..."
            git reset --hard $current_commit
            docker compose up -d
            exit 1
          fi
          EOF

      - name: Cleanup (weekly)
        if: github.event.schedule == '0 0 * * 1'  # –ö–∞–∂–¥—ã–π –ø–æ–Ω–µ–¥–µ–ª—å–Ω–∏–∫ –≤ 00:00
        run: |
          ssh target-server "docker system prune -af --filter 'until=168h'"  # –û—á–∏—Å—Ç–∫–∞ –æ–±—Ä–∞–∑–æ–≤ —Å—Ç–∞—Ä—à–µ 1 –Ω–µ–¥–µ–ª–∏