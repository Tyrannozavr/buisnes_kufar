name: Deploy to production

on:
  push:
    branches: [ "master" ]

jobs:
  deploy:
    runs-on: ubuntu-latest
    timeout-minutes: 30

    steps:
      - uses: actions/checkout@v4

      # Настройка SSH (оптимизированная версия)
      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.SSH_PRIVATE_KEY }}" > ~/.ssh/id_ed25519
          chmod 600 ~/.ssh/id_ed25519
          echo "${{ secrets.SERVER_IP }} ecdsa-sha2-nistp256 AAAAE2VjZHNhLXNoYTItbmlzdHAyNTYAAAAIbmlzdHAyNTYAAABBBEmKSENjQEezOmxkZMy7opKgwFB9nkm5YLr4GqQd6k1P1n1uUVUjOZiVXyZpeYzi2NABqXZNZg8X1u8uW2/2QY=" >> ~/.ssh/known_hosts
          echo "Host target-server" > ~/.ssh/config
          echo "  HostName ${{ secrets.SERVER_IP }}" >> ~/.ssh/config
          echo "  User root" >> ~/.ssh/config
          echo "  IdentityFile ~/.ssh/id_ed25519" >> ~/.ssh/config
          echo "  StrictHostKeyChecking no" >> ~/.ssh/config

      - name: Check for changes
        id: check-changes
        run: |
          changes=$(ssh target-server "cd buisnes_kufar && git fetch origin && git diff --name-only HEAD origin/master")
          if [ -z "$changes" ]; then
            echo "::set-output name=has_changes::false"
            echo "✅ No changes detected"
          else
            echo "::set-output name=has_changes::true"
            echo "🔴 Changes detected:"
            echo "$changes"
          fi

      - name: Deploy application
        if: steps.check-changes.outputs.has_changes == 'true'
        run: |
          ssh target-server << 'EOF'
          set -e
          cd buisnes_kufar
          
          # Create rollback point
          current_commit=$(git rev-parse HEAD)
          echo "Rollback point: $current_commit"
          
          # Apply changes
          git reset --hard origin/master
          
          # Проверка .env файлов (только если их нет)
          [ -f "./backend/.env" ] || cp ./backend/.env.example ./backend/.env
          [ -f "./frontend/.env" ] || cp ./frontend/.env.example ./frontend/.env
          
          # Основная команда деплоя (как вы делаете вручную)
          echo "🚀 Starting deployment with nginx..."
          if docker compose up -d --build nginx; then
            # Проверка работы nginx
            for i in {1..5}; do
              if docker compose ps nginx | grep -q "Up"; then
                echo "✅ Nginx is running"
                break
              else
                if [ $i -eq 5 ]; then
                  echo "❌ Nginx failed to start after 5 attempts"
                  docker compose logs nginx
                  exit 1
                fi
                sleep 5
              fi
            done
          else
            echo "❌ Deployment failed! Rolling back..."
            git reset --hard $current_commit
            docker compose up -d nginx
            exit 1
          fi
          EOF

      - name: Cleanup (weekly)
        if: github.event.schedule == '0 0 * * 1'  # Каждый понедельник в 00:00
        run: |
          ssh target-server "docker system prune -af --filter 'until=168h'"  # Очистка образов старше 1 недели