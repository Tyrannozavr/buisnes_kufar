from fastapi import APIRouter, HTTPException
from datetime import datetime
from app.api.common.services.cities_filter_service import CitiesFilterService

router = APIRouter()

# –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à
_cache_data = None
_cache_timestamp = None
CACHE_TTL = 60  # 60 —Å–µ–∫—É–Ω–¥


# –ö—ç—à–∏ –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
_cache_products = None
_cache_services = None
_cache_companies = None
_timestamps = {}


async def _get_tree_response(location_tree):
    """–§–æ—Ä–º–∏—Ä—É–µ—Ç —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç —Å –¥–µ—Ä–µ–≤–æ–º"""
    total_cities = sum(
        len(region["cities"])
        for country in location_tree
        for fd in country["federal_districts"]
        for region in fd["regions"]
    )
    
    return {
        "countries": location_tree,
        "total_countries": len(location_tree),
        "total_federal_districts": sum(len(country["federal_districts"]) for country in location_tree),
        "total_regions": sum(
            len(fd["regions"])
            for country in location_tree
            for fd in country["federal_districts"]
        ),
        "total_cities": total_cities
    }


@router.get("/products")
async def get_products_cities_filter_tree():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ –ª–æ–∫–∞—Ü–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —Ç–æ–≤–∞—Ä–æ–≤"""
    global _cache_products, _timestamps
    
    cache_key = "products"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in _timestamps:
            age = (datetime.now() - _timestamps[cache_key]).total_seconds()
            if age < CACHE_TTL and _cache_products:
                print("‚úÖ Products –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
                return _cache_products
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ —Ç–æ–≤–∞—Ä–∞—Ö –∏–∑ –ë–î...")
        location_tree = await CitiesFilterService.build_products_location_tree()
        response = await _get_tree_response(location_tree)
        
        _cache_products = response
        _timestamps[cache_key] = datetime.now()
        print(f"‚úÖ Products –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
        
        return response
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ products: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/services")
async def get_services_cities_filter_tree():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ –ª–æ–∫–∞—Ü–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º —É—Å–ª—É–≥"""
    global _cache_services, _timestamps
    
    cache_key = "services"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in _timestamps:
            age = (datetime.now() - _timestamps[cache_key]).total_seconds()
            if age < CACHE_TTL and _cache_services:
                print("‚úÖ Services –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
                return _cache_services
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± —É—Å–ª—É–≥–∞—Ö –∏–∑ –ë–î...")
        location_tree = await CitiesFilterService.build_services_location_tree()
        response = await _get_tree_response(location_tree)
        
        _cache_services = response
        _timestamps[cache_key] = datetime.now()
        print(f"‚úÖ Services –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
        
        return response
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ services: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/companies")
async def get_companies_cities_filter_tree():
    """–ü–æ–ª—É—á–∏—Ç—å –¥–µ—Ä–µ–≤–æ –ª–æ–∫–∞—Ü–∏–π —Å –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ–º –∫–æ–º–ø–∞–Ω–∏–π"""
    global _cache_companies, _timestamps
    
    cache_key = "companies"
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—ç—à
        if cache_key in _timestamps:
            age = (datetime.now() - _timestamps[cache_key]).total_seconds()
            if age < CACHE_TTL and _cache_companies:
                print("‚úÖ Companies –¥–∞–Ω–Ω—ã–µ –∏–∑ –∫—ç—à–∞")
                return _cache_companies
        
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ –∫–æ–º–ø–∞–Ω–∏—è—Ö –∏–∑ –ë–î...")
        location_tree = await CitiesFilterService.build_companies_location_tree()
        response = await _get_tree_response(location_tree)
        
        _cache_companies = response
        _timestamps[cache_key] = datetime.now()
        print(f"‚úÖ Companies –¥–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ –∫—ç—à")
        
        return response
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤ companies: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/")
async def get_cities_filter_tree():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ª–æ–∫–∞—Ü–∏–π (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é - –∫–æ–º–ø–∞–Ω–∏–∏)"""
    # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
    return await get_companies_cities_filter_tree()


@router.get("/cities-stats")
async def get_cities_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    try:
        return await CitiesFilterService.get_cities_stats()
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
