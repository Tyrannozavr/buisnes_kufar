from fastapi import APIRouter, HTTPException
from datetime import datetime
from app.api.common.services.cities_filter_service import CitiesFilterService

router = APIRouter()

# –ü—Ä–æ—Å—Ç–æ–π in-memory –∫—ç—à
_cache_data = None
_cache_timestamp = None
CACHE_TTL = 60  # 60 —Å–µ–∫—É–Ω–¥


@router.get("/cities-filter")
async def get_cities_filter_tree():
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞ –≥–æ—Ä–æ–¥–æ–≤ —Å –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ–º"""
    global _cache_data, _cache_timestamp
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º in-memory –∫—ç—à
        if _cache_data and _cache_timestamp:
            age = (datetime.now() - _cache_timestamp).total_seconds()
            if age < CACHE_TTL:
                print("‚úÖ –î–∞–Ω–Ω—ã–µ –ø–æ–ª—É—á–µ–Ω—ã –∏–∑ in-memory –∫—ç—à–∞")
                return _cache_data
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ service
        print("üîÑ –ó–∞–≥—Ä—É–∑–∫–∞ –¥–∞–Ω–Ω—ã—Ö –∏–∑ –ë–î...")
        location_tree = await CitiesFilterService.build_location_tree()
        
        # –ü–æ–¥—Å—á–∏—Ç—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
        total_cities = sum(
            len(region["cities"])
            for country in location_tree
            for fd in country["federal_districts"]
            for region in fd["regions"]
        )
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Ç–≤–µ—Ç
        response = {
            "countries": location_tree,
            "total_countries": len(location_tree),
            "total_federal_districts": sum(len(country["federal_districts"]) for country in location_tree),
            "total_regions": sum(
                len(fd["regions"])
                for country in location_tree
                for fd in country["federal_districts"]
            ),
            "total_cities": total_cities
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ in-memory –∫—ç—à
        _cache_data = response
        _cache_timestamp = datetime.now()
        print(f"‚úÖ –î–∞–Ω–Ω—ã–µ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ in-memory –∫—ç—à ({total_cities} –≥–æ—Ä–æ–¥–æ–≤)")
        
        return response
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        import traceback
        traceback.print_exc()
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/cities-stats")
async def get_cities_stats():
    """–ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    try:
        return await CitiesFilterService.get_cities_stats()
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
