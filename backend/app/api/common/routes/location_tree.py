from fastapi import APIRouter, Depends, HTTPException, Query
from sqlalchemy.ext.asyncio import AsyncSession
from sqlalchemy import select
from typing import List, Optional
from fastapi import Query as FastAPIQuery
import logging

from app.db.base import AsyncSessionLocal
from app.api.common.models.country import Country
from app.api.common.models.federal_district import FederalDistrict
from app.api.common.models.region import Region
from app.api.common.models.city import City
from app.api.common.schemas.location import LocationItem, LocationResponse

router = APIRouter()
logger = logging.getLogger(__name__)


async def get_db():
    async with AsyncSessionLocal() as session:
        yield session


@router.get("/countries", response_model=LocationResponse)
async def get_countries(db = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å—Ç—Ä–∞–Ω"""
    try:
        result = await db.execute(
            select(Country).where(Country.is_active == True).order_by(Country.name)
        )
        countries = result.scalars().all()
        
        items = [{"label": country.name, "value": country.code} for country in countries]
        
        return LocationResponse(
            items=items,
            total=len(items)
        )
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/federal-districts", response_model=LocationResponse)
async def get_federal_districts(
    country_code: str = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã"),
    db = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–≥–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É
        country_result = await db.execute(
            select(Country).where(Country.code == country_code, Country.is_active == True)
        )
        country = country_result.scalar_one_or_none()
        
        if not country:
            raise HTTPException(status_code=404, detail="–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞
        result = await db.execute(
            select(FederalDistrict)
            .where(FederalDistrict.country_id == country.id, FederalDistrict.is_active == True)
            .order_by(FederalDistrict.name)
        )
        districts = result.scalars().all()
        
        items = [{"label": district.name, "value": district.code} for district in districts]
        
        return LocationResponse(
            items=items,
            total=len(items)
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/regions", response_model=LocationResponse)
async def get_regions(
    country_code: str = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã"),
    federal_district_code: Optional[str] = Query(None, description="–ö–æ–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞"),
    db = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ä–µ–≥–∏–æ–Ω–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ –∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º—É –æ–∫—Ä—É–≥—É"""
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É
        country_result = await db.execute(
            select(Country).where(Country.code == country_code, Country.is_active == True)
        )
        country = country_result.scalar_one_or_none()
        
        if not country:
            raise HTTPException(status_code=404, detail="–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
        query = select(Region).where(Region.country_id == country.id, Region.is_active == True)
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
        if federal_district_code:
            fd_result = await db.execute(
                select(FederalDistrict)
                .where(FederalDistrict.code == federal_district_code, FederalDistrict.is_active == True)
            )
            federal_district = fd_result.scalar_one_or_none()
            
            if federal_district:
                query = query.where(Region.federal_district_id == federal_district.id)
        
        query = query.order_by(Region.name)
        result = await db.execute(query)
        regions = result.scalars().all()
        
        items = [{"label": region.name, "value": region.code} for region in regions]
        
        return LocationResponse(
            items=items,
            total=len(items)
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/cities", response_model=LocationResponse)
async def get_cities(
    country_code: str = Query(..., description="–ö–æ–¥ —Å—Ç—Ä–∞–Ω—ã"),
    region_code: Optional[str] = Query(default=None, description="–ö–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞"),
    federal_district_code: Optional[str] = Query(default=None, description="–ö–æ–¥ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞"),
    search: Optional[str] = Query(default=None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –≥–æ—Ä–æ–¥–∞"),
    million_cities_only: bool = Query(False, description="–¢–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–∞-–º–∏–ª–ª–∏–æ–Ω–Ω–∏–∫–∏"),
    regional_centers_only: bool = Query(False, description="–¢–æ–ª—å–∫–æ —Ä–µ–≥–∏–æ–Ω–∞–ª—å–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã"),
    db = Depends(get_db)
):
    """–ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤ –ø–æ —Å—Ç—Ä–∞–Ω–µ, —Ä–µ–≥–∏–æ–Ω—É –∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–º—É –æ–∫—Ä—É–≥—É"""
    print(f"üîç –ó–∞–ø—Ä–æ—Å –≥–æ—Ä–æ–¥–æ–≤: country_code={country_code}, region_code={region_code}, federal_district_code={federal_district_code}, search={search}")
    try:
        # –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Å—Ç—Ä–∞–Ω—É (—Å–Ω–∞—á–∞–ª–∞ –ø–æ –∫–æ–¥—É, –ø–æ—Ç–æ–º –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é)
        country_result = await db.execute(
            select(Country).where(Country.code == country_code, Country.is_active == True)
        )
        country = country_result.scalar_one_or_none()
        
        # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–æ–¥—É, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
        if not country:
            country_result = await db.execute(
                select(Country).where(Country.name == country_code, Country.is_active == True)
            )
            country = country_result.scalar_one_or_none()
        
        if not country:
            raise HTTPException(status_code=404, detail="–°—Ç—Ä–∞–Ω–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        
        logger.info(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–∞ —Å—Ç—Ä–∞–Ω–∞ {country.name} —Å ID {country.id}")
        
        # –°—Ç—Ä–æ–∏–º –∑–∞–ø—Ä–æ—Å
        query = select(City).where(City.country_id == country.id, City.is_active == True)
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ä–µ–≥–∏–æ–Ω, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
        if region_code:
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–¥—É
            region_result = await db.execute(
                select(Region)
                .where(Region.code == region_code, Region.is_active == True)
            )
            region = region_result.scalar_one_or_none()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–æ–¥—É, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if not region:
                region_result = await db.execute(
                    select(Region)
                    .where(Region.name == region_code, Region.is_active == True)
                )
                region = region_result.scalar_one_or_none()
            
            if region:
                query = query.where(City.region_id == region.id)
                logger.info(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω —Ä–µ–≥–∏–æ–Ω {region.name} —Å ID {region.id}")
            else:
                logger.warning(f"‚ùå DEBUG: –†–µ–≥–∏–æ–Ω —Å –∫–æ–¥–æ–º/–Ω–∞–∑–≤–∞–Ω–∏–µ–º {region_code} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –ï—Å–ª–∏ —É–∫–∞–∑–∞–Ω —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥, —Ñ–∏–ª—å—Ç—Ä—É–µ–º –ø–æ –Ω–µ–º—É
        if federal_district_code and isinstance(federal_district_code, str):
            # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –∫–æ–¥—É
            fd_result = await db.execute(
                select(FederalDistrict)
                .where(FederalDistrict.code == federal_district_code, FederalDistrict.is_active == True)
            )
            federal_district = fd_result.scalar_one_or_none()
            
            # –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ –ø–æ –∫–æ–¥—É, –ø—Ä–æ–±—É–µ–º –Ω–∞–π—Ç–∏ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é (–¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏)
            if not federal_district:
                fd_result = await db.execute(
                    select(FederalDistrict)
                    .where(FederalDistrict.name == federal_district_code, FederalDistrict.is_active == True)
                )
                federal_district = fd_result.scalar_one_or_none()
            
            if federal_district:
                query = query.where(City.federal_district_id == federal_district.id)
                logger.info(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ {federal_district.name} —Å ID {federal_district.id}")
            else:
                logger.warning(f"‚ùå DEBUG: –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ —Å –∫–æ–¥–æ–º/–Ω–∞–∑–≤–∞–Ω–∏–µ–º {federal_district_code} –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        # –§–∏–ª—å—Ç—Ä—ã –ø–æ —Ç–∏–ø—É –≥–æ—Ä–æ–¥–∞
        if million_cities_only:
            query = query.where(City.is_million_city == True)
        
        if regional_centers_only:
            query = query.where(City.is_regional_center == True)
        
        # –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é
        if search:
            query = query.where(City.name.ilike(f"%{search}%"))
        
        query = query.order_by(City.name)
        result = await db.execute(query)
        cities = result.scalars().all()
        
        logger.info(f"üîç DEBUG: –ù–∞–π–¥–µ–Ω–æ {len(cities)} –≥–æ—Ä–æ–¥–æ–≤")
        if cities:
            logger.info(f"üîç DEBUG: –ü–µ—Ä–≤—ã–µ 3 –≥–æ—Ä–æ–¥–∞: {[city.name for city in cities[:3]]}")
        
        items = [{"label": city.name, "value": city.name} for city in cities]
        
        return LocationResponse(
            items=items,
            total=len(items)
        )
    except HTTPException:
        raise
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))


@router.get("/location-tree", response_model=dict)
async def get_location_tree(db = Depends(get_db)):
    """–ü–æ–ª—É—á–∏—Ç—å –ø–æ–ª–Ω–æ–µ –¥–µ—Ä–µ–≤–æ –ª–æ–∫–∞—Ü–∏–π –¥–ª—è —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞"""
    try:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ —Å—Ç—Ä–∞–Ω—ã —Å –∏—Ö —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏ –æ–∫—Ä—É–≥–∞–º–∏, —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –∏ –≥–æ—Ä–æ–¥–∞–º–∏
        countries_result = await db.execute(
            select(Country).where(Country.is_active == True).order_by(Country.name)
        )
        countries = countries_result.scalars().all()
        
        location_tree = []
        
        for country in countries:
            country_data = {
                "id": country.id,
                "code": country.code,
                "name": country.name,
                "federal_districts": []
            }
            
            # –ü–æ–ª—É—á–∞–µ–º —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞ –¥–ª—è —Å—Ç—Ä–∞–Ω—ã
            fd_result = await db.execute(
                select(FederalDistrict)
                .where(FederalDistrict.country_id == country.id, FederalDistrict.is_active == True)
                .order_by(FederalDistrict.name)
            )
            federal_districts = fd_result.scalars().all()
            
            for fd in federal_districts:
                fd_data = {
                    "id": fd.id,
                    "name": fd.name,
                    "code": fd.code,
                    "regions": []
                }
                
                # –ü–æ–ª—É—á–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞
                regions_result = await db.execute(
                    select(Region)
                    .where(Region.federal_district_id == fd.id, Region.is_active == True)
                    .order_by(Region.name)
                )
                regions = regions_result.scalars().all()
                
                for region in regions:
                    region_data = {
                        "id": region.id,
                        "name": region.name,
                        "code": region.code,
                        "cities": []
                    }
                    
                    # –ü–æ–ª—É—á–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è —Ä–µ–≥–∏–æ–Ω–∞
                    cities_result = await db.execute(
                        select(City)
                        .where(City.region_id == region.id, City.is_active == True)
                        .order_by(City.name)
                    )
                    cities = cities_result.scalars().all()
                    
                    for city in cities:
                        city_data = {
                            "id": city.id,
                            "name": city.name,
                            "population": city.population,
                            "is_million_city": city.is_million_city,
                            "is_regional_center": city.is_regional_center
                        }
                        region_data["cities"].append(city_data)
                    
                    fd_data["regions"].append(region_data)
                
                country_data["federal_districts"].append(fd_data)
            
            location_tree.append(country_data)
        
        return {"countries": location_tree}
        
    except Exception as e:
        raise HTTPException(status_code=500, detail=str(e))
