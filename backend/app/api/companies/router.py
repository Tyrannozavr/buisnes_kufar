from typing import Optional, Any, List, Dict

from fastapi import APIRouter, Query, HTTPException, Body

from app.api.companies.dependencies import companies_repository_dep
from app.api.companies.schemas.companies import CompaniesResponse, PaginationInfo
from app.api.company.schemas.company import CompanyResponse, ShortCompanyResponse, CompanyStatisticsResponse
from app.api.company.schemas.filters import CompanyFilterRequest

router = APIRouter(tags=["companies"])


@router.get("/", response_model=CompaniesResponse)
async def get_companies(
        page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
        per_page: int = Query(10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
        limit: Optional[int] = Query(None, ge=1, description="–û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞"),
        companies_repository: companies_repository_dep = None
) -> CompaniesResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    
    Args:
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)
        limit: –û–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–µ –æ–±—â–µ–≥–æ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ)
        companies_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–ø–∞–Ω–∏–π
        
    Returns:
        CompaniesResponse: –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    companies, total_count = await companies_repository.get_companies_paginated(
        page=page,
        per_page=per_page,
        limit=limit
    )

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (total_count + per_page - 1) // per_page

    return CompaniesResponse(
        data=companies,
        pagination=PaginationInfo(
            total=total_count,
            page=page,
            perPage=per_page,
            totalPages=total_pages
        )
    )


@router.get("/", response_model=CompaniesResponse)
async def get_all_companies(
        page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
        per_page: int = Query(10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
        search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏"),
        cities: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"),
        companies_repository: companies_repository_dep = None
) -> CompaniesResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    
    Args:
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)
        search: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        cities: ID –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        companies_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–ø–∞–Ω–∏–π
        
    Returns:
        CompaniesResponse: –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    # Parse cities parameter
    cities_list = None
    if cities:
        try:
            cities_list = [int(c.strip()) for c in cities.split(',')]
        except ValueError:
            pass

    companies, total_count = await companies_repository.get_companies_with_filters(
        page=page,
        per_page=per_page,
        search=search,
        cities=cities_list
    )

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (total_count + per_page - 1) // per_page

    return CompaniesResponse(
        data=companies,
        pagination=PaginationInfo(
            total=total_count,
            page=page,
            perPage=per_page,
            totalPages=total_pages
        )
    )


@router.get("/services", response_model=CompaniesResponse)
async def get_services_companies(
        page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
        per_page: int = Query(10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
        search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏"),
        cities: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"),
        companies_repository: companies_repository_dep = None
) -> CompaniesResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π, –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è—é—â–∏—Ö —É—Å–ª—É–≥–∏ (–≤–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ –¥–µ–ª–∞—é—Ç –æ–±–∞)
    
    Args:
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)
        search: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        cities: ID –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        companies_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–ø–∞–Ω–∏–π
        
    Returns:
        CompaniesResponse: –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    # Parse cities parameter
    cities_list = None
    if cities:
        try:
            cities_list = [int(c.strip()) for c in cities.split(',')]
        except ValueError:
            pass

    companies, total_count = await companies_repository.get_companies_with_filters(
        page=page,
        per_page=per_page,
        search=search,
        cities=cities_list
    )

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (total_count + per_page - 1) // per_page

    return CompaniesResponse(
        data=companies,
        pagination=PaginationInfo(
            total=total_count,
            page=page,
            perPage=per_page,
            totalPages=total_pages
        )
    )


@router.get("/products", response_model=CompaniesResponse)
async def get_product_companies(
        page: int = Query(1, ge=1, description="–ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã"),
        per_page: int = Query(10, ge=1, le=100, description="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ"),
        search: Optional[str] = Query(None, description="–ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏"),
        cities: Optional[str] = Query(None, description="–§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º (—á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é)"),
        companies_repository: companies_repository_dep = None
) -> CompaniesResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π, –ø—Ä–æ–∏–∑–≤–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä—ã (–≤–∫–ª—é—á–∞—è —Ç–µ, —á—Ç–æ –¥–µ–ª–∞—é—Ç –æ–±–∞)
    
    Args:
        page: –ù–æ–º–µ—Ä —Å—Ç—Ä–∞–Ω–∏—Ü—ã (–Ω–∞—á–∏–Ω–∞—è —Å 1)
        per_page: –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –Ω–∞ —Å—Ç—Ä–∞–Ω–∏—Ü–µ (1-100)
        search: –ü–æ–∏—Å–∫ –ø–æ –Ω–∞–∑–≤–∞–Ω–∏—é –∫–æ–º–ø–∞–Ω–∏–∏
        cities: ID –≥–æ—Ä–æ–¥–æ–≤ —á–µ—Ä–µ–∑ –∑–∞–ø—è—Ç—É—é
        companies_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–ø–∞–Ω–∏–π
        
    Returns:
        CompaniesResponse: –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π –æ –ø–∞–≥–∏–Ω–∞—Ü–∏–∏
    """
    # Parse cities parameter
    cities_list = None
    if cities:
        try:
            cities_list = [int(c.strip()) for c in cities.split(',')]
        except ValueError:
            pass

    import logging
    logger = logging.getLogger(__name__)
    logger.info(f"üîç Router: get_product_companies called with cities_list={cities_list}")
    
    companies, total_count = await companies_repository.get_product_companies(
        page=page,
        per_page=per_page,
        search=search,
        cities=cities_list
    )
    
    logger.info(f"‚úÖ Found {total_count} companies")

    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (total_count + per_page - 1) // per_page

    return CompaniesResponse(
        data=companies,
        pagination=PaginationInfo(
            total=total_count,
            page=page,
            perPage=per_page,
            totalPages=total_pages
        )
    )


@router.post("/search", tags=["search"])
async def search_companies_with_filters(
        filter_request: CompanyFilterRequest,
        companies_repository: companies_repository_dep = None
):
    """
    POST endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞ –∫–æ–º–ø–∞–Ω–∏–π —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π (–∞–Ω–∞–ª–æ–≥ /products/search)
    
    Args:
        filter_request: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π
        
    Returns:
        CompaniesResponse: –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    from sqlalchemy import select, func, and_, or_
    from app.api.company.models.company import Company, BusinessType
    from sqlalchemy.orm import selectinload
    
    # –ë–∞–∑–æ–≤—ã–µ —É—Å–ª–æ–≤–∏—è
    conditions = [Company.is_active == True]
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –ø–æ–∏—Å–∫—É
    if filter_request.search:
        conditions.append(Company.name.ilike(f"%{filter_request.search}%"))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ –≥–æ—Ä–æ–¥–∞–º
    if filter_request.cities:
        from app.api.common.models.city import City
        cities_query = select(City.name).where(City.id.in_(filter_request.cities))
        cities_result = await companies_repository.session.execute(cities_query)
        city_names = [row[0] for row in cities_result]
        if city_names:
            conditions.append(Company.city.in_(city_names))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–∏–ø—É –±–∏–∑–Ω–µ—Å–∞
    if filter_request.business_type == "goods":
        conditions.append(or_(
            Company.business_type == BusinessType.GOODS,
            Company.business_type == BusinessType.BOTH
        ))
    elif filter_request.business_type == "services":
        conditions.append(or_(
            Company.business_type == BusinessType.SERVICES,
            Company.business_type == BusinessType.BOTH
        ))
    
    # –§–∏–ª—å—Ç—Ä –ø–æ —Ç–æ—Ä–≥–æ–≤–æ–π –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    # TODO: —Ä–µ–∞–ª–∏–∑–æ–≤–∞—Ç—å –ø—Ä–∏ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç–∏
    
    # –ë–∞–∑–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
    base_query = select(Company).options(
        selectinload(Company.officials)
    ).where(and_(*conditions)).order_by(Company.registration_date.desc())
    
    # –ü–æ–¥—Å—á—ë—Ç total
    count_query = select(func.count(Company.id)).where(and_(*conditions))
    count_result = await companies_repository.session.execute(count_query)
    total_count = count_result.scalar()
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –ø–∞–≥–∏–Ω–∞—Ü–∏—é
    offset = filter_request.skip
    paginated_query = base_query.offset(offset).limit(filter_request.limit)
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –∑–∞–ø—Ä–æ—Å
    result = await companies_repository.session.execute(paginated_query)
    companies = result.scalars().all()
    
    # –í—ã—á–∏—Å–ª—è–µ–º –æ–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å—Ç—Ä–∞–Ω–∏—Ü
    total_pages = (total_count + filter_request.limit - 1) // filter_request.limit
    
    return CompaniesResponse(
        data=list(companies),
        pagination=PaginationInfo(
            total=total_count,
            page=offset // filter_request.limit + 1,
            perPage=filter_request.limit,
            totalPages=total_pages
        )
    )


@router.post("/products/search", tags=["search"])
async def search_product_companies_with_filters(
        filter_request: CompanyFilterRequest,
        companies_repository: companies_repository_dep = None
):
    """
    POST endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª–µ–π —Ç–æ–≤–∞—Ä–æ–≤ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    
    Args:
        filter_request: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π
        
    Returns:
        CompaniesResponse: –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –ø—Ä–æ–∏–∑–≤–æ–¥—è—â–∏—Ö —Ç–æ–≤–∞—Ä—ã —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º business_type = "goods" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    filter_request.business_type = filter_request.business_type or "goods"
    return await search_companies_with_filters(filter_request, companies_repository)


@router.post("/services/search", tags=["search"])
async def search_service_companies_with_filters(
        filter_request: CompanyFilterRequest,
        companies_repository: companies_repository_dep = None
):
    """
    POST endpoint –¥–ª—è –ø–æ–∏—Å–∫–∞ –ø–æ—Å—Ç–∞–≤—â–∏–∫–æ–≤ —É—Å–ª—É–≥ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
    
    Args:
        filter_request: –ü–∞—Ä–∞–º–µ—Ç—Ä—ã —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏ –∫–æ–º–ø–∞–Ω–∏–π
        
    Returns:
        CompaniesResponse: –°–ø–∏—Å–æ–∫ –∫–æ–º–ø–∞–Ω–∏–π –æ–∫–∞–∑—ã–≤–∞—é—â–∏—Ö —É—Å–ª—É–≥–∏ —Å –ø–∞–≥–∏–Ω–∞—Ü–∏–µ–π
    """
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º business_type = "services" –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    filter_request.business_type = filter_request.business_type or "services"
    return await search_companies_with_filters(filter_request, companies_repository)


@router.get("/slug/{company_slug}/statistics")
async def get_company_statistics(
        company_slug: str,
        companies_repository: companies_repository_dep
) -> CompanyStatisticsResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –µ—ë slug

    Args:
        company_slug: Slug –∫–æ–º–ø–∞–Ω–∏–∏

    Returns:
        CompanyStatisticsResponse: –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    company = await companies_repository.get_company_by_slug(
        company_slug=company_slug,
        include_products=True
    )

    if not company:
        raise HTTPException(status_code=404, detail="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")

    return CompanyStatisticsResponse(
        total_products=len(company.products),
        total_views=company.total_views,
        monthly_views=company.monthly_views,
        total_purchases=company.total_purchases,
        registration_date=company.registration_date
    )


@router.get("/slug/{company_slug}")
async def get_company_by_id(
        company_slug: str,
        short: bool = Query(False, description="–í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"),
        companies_repository: companies_repository_dep = None
) -> ShortCompanyResponse | CompanyResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –µ—ë slug

    Args:
        company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏
        short: –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏
        companies_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–ø–∞–Ω–∏–π

    Returns:
        CompanyResponse: –ü–æ–ª–Ω–∞—è –∏–ª–∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    company = await companies_repository.get_company_by_slug(company_slug)

    if not company:
        raise HTTPException(status_code=404, detail="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    if short:
        return ShortCompanyResponse.model_validate(company)
    else:
        return CompanyResponse.model_validate(company)


@router.get("/{company_id}")
async def get_company_by_id(
        company_id: int,
        short: bool = Query(False, description="–í–æ–∑–≤—Ä–∞—â–∞—Ç—å —Ç–æ–ª—å–∫–æ –∫—Ä–∞—Ç–∫—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é"),
        companies_repository: companies_repository_dep = None
) -> ShortCompanyResponse | CompanyResponse:
    """
    –ü–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–æ–º–ø–∞–Ω–∏–∏ –ø–æ –µ—ë slug

    Args:
        company_id: ID –∫–æ–º–ø–∞–Ω–∏–∏
        short: –ï—Å–ª–∏ True, –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ–ª—å–∫–æ –Ω–∞–∑–≤–∞–Ω–∏–µ –∏ –ª–æ–≥–æ—Ç–∏–ø –∫–æ–º–ø–∞–Ω–∏–∏
        companies_repository: –†–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π –∫–æ–º–ø–∞–Ω–∏–π

    Returns:
        CompanyResponse: –ü–æ–ª–Ω–∞—è –∏–ª–∏ –∫—Ä–∞—Ç–∫–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫–æ–º–ø–∞–Ω–∏–∏
    """
    company = await companies_repository.get_company_by_id(company_id=company_id)

    if not company:
        raise HTTPException(status_code=404, detail="–ö–æ–º–ø–∞–Ω–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
    if short:
        return ShortCompanyResponse.model_validate(company)
    else:
        return CompanyResponse.model_validate(company)
