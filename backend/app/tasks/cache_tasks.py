import logging
from datetime import datetime
from typing import List, Dict, Any
import asyncio

from sqlalchemy import text, delete, insert, select
from sqlalchemy.ext.asyncio import AsyncSession

from app.celery_app import celery_app
from app.db.base import AsyncSessionLocal
from app.api.common.models.active_cities_cache import ActiveCitiesCache, ProductCityMapping
from app.api.company.models.company import Company
from app.api.products.models.product import Product, ProductType

logger = logging.getLogger(__name__)


@celery_app.task(bind=True, name="app.tasks.cache_tasks.update_product_city_cache")
def update_product_city_cache(self):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Å–≤—è–∑–µ–π –ø—Ä–æ–¥—É–∫—Ç–æ–≤ —Å –≥–æ—Ä–æ–¥–∞–º–∏"""
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ event loop
        result = asyncio.run(_update_product_city_cache_async())
        
        logger.info(f"‚úÖ –ö—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        raise self.retry(exc=e, countdown=60, max_retries=3)


async def _update_product_city_cache_async() -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as session:
        
        # 1. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏
        await session.execute(delete(ProductCityMapping))
        await session.execute(delete(ActiveCitiesCache).where(ActiveCitiesCache.cache_type == "products"))
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ–¥—É–∫—Ç—ã —Å –∏—Ö –∫–æ–º–ø–∞–Ω–∏—è–º–∏ –∏ –≥–æ—Ä–æ–¥–∞–º–∏
        query = text("""
            SELECT DISTINCT 
                p.id as product_id,
                c.id as company_id,
                c.city_id,
                c.city as city_name,
                c.region as region_name,
                c.federal_district as federal_district_name,
                c.country as country_name
            FROM products p
            JOIN companies c ON p.company_id = c.id
            WHERE p.type = 'GOOD' 
                AND p.is_deleted = false 
                AND p.is_hidden = false
                AND c.is_active = true
                AND c.city_id IS NOT NULL
                AND c.city IS NOT NULL
                AND c.city != ''
        """)
        
        result = await session.execute(query)
        products_data = result.fetchall()
        
        # 3. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–ø–∏—Å–∏ –≤ ProductCityMapping
        mapping_records = []
        active_city_ids = set()
        
        for row in products_data:
            mapping_records.append({
                "product_id": row.product_id,
                "company_id": row.company_id,
                "city_id": row.city_id
            })
            active_city_ids.add(row.city_id)
        
        if mapping_records:
            await session.execute(insert(ProductCityMapping), mapping_records)
        
        # 4. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ActiveCitiesCache
        cache_record = ActiveCitiesCache(
            cache_type="products",
            active_city_ids=list(active_city_ids),
            total_cities=len(active_city_ids),
            total_companies=len(set(row.company_id for row in products_data)),
            total_products=len(products_data),
            last_updated=datetime.utcnow(),
            is_active=True
        )
        
        session.add(cache_record)
        await session.commit()
        
        return {
            "total_products": len(products_data),
            "total_companies": len(set(row.company_id for row in products_data)),
            "total_cities": len(active_city_ids),
            "mapping_records": len(mapping_records)
        }


@celery_app.task(bind=True, name="app.tasks.cache_tasks.update_company_city_cache")
def update_company_city_cache(self):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫—ç—à —Å–≤—è–∑–µ–π –∫–æ–º–ø–∞–Ω–∏–π —Å –≥–æ—Ä–æ–¥–∞–º–∏"""
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫—ç—à–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ event loop
        result = asyncio.run(_update_company_city_cache_async())
        
        logger.info(f"‚úÖ –ö—ç—à –∫–æ–º–ø–∞–Ω–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤ –æ–±–Ω–æ–≤–ª–µ–Ω: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤: {e}")
        raise self.retry(exc=e, countdown=60, max_retries=3)


async def _update_company_city_cache_async() -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫—ç—à–∞ –∫–æ–º–ø–∞–Ω–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as session:
        
        # 1. –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–ø–∏—Å–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π
        await session.execute(delete(ActiveCitiesCache).where(ActiveCitiesCache.cache_type == "companies"))
        
        # 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∫–æ–º–ø–∞–Ω–∏–∏ —Å –≥–æ—Ä–æ–¥–∞–º–∏
        query = text("""
            SELECT DISTINCT 
                c.id as company_id,
                c.city_id,
                c.city as city_name,
                c.region as region_name,
                c.federal_district as federal_district_name,
                c.country as country_name
            FROM companies c
            WHERE c.is_active = true
                AND c.city_id IS NOT NULL
                AND c.city IS NOT NULL
                AND c.city != ''
        """)
        
        result = await session.execute(query)
        companies_data = result.fetchall()
        
        # 3. –°–æ–∑–¥–∞–µ–º –∑–∞–ø–∏—Å—å –≤ ActiveCitiesCache –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π
        active_city_ids = set(row.city_id for row in companies_data)
        
        cache_record = ActiveCitiesCache(
            cache_type="companies",
            active_city_ids=list(active_city_ids),
            total_cities=len(active_city_ids),
            total_companies=len(companies_data),
            total_products=0,  # –î–ª—è –∫–æ–º–ø–∞–Ω–∏–π –Ω–µ —Å—á–∏—Ç–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç—ã
            last_updated=datetime.utcnow(),
            is_active=True
        )
        
        session.add(cache_record)
        await session.commit()
        
        return {
            "total_companies": len(companies_data),
            "total_cities": len(active_city_ids)
        }


@celery_app.task(bind=True, name="app.tasks.cache_tasks.update_cities_product_count")
def update_cities_product_count(self):
    """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ event loop
        result = asyncio.run(_update_cities_product_count_async())
        
        logger.info(f"‚úÖ –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º –æ–±–Ω–æ–≤–ª–µ–Ω–æ: {result}")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º: {e}")
        raise self.retry(exc=e, countdown=60, max_retries=3)


async def _update_cities_product_count_async() -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as session:
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º –¥–ª—è —Ç–æ–≤–∞—Ä–æ–≤
        goods_query = text("""
            SELECT 
                c.city as city_name,
                c.region as region_name,
                COUNT(p.id) as product_count
            FROM companies c
            JOIN products p ON c.id = p.company_id
            WHERE p.type = 'GOOD'
                AND p.is_deleted = false 
                AND p.is_hidden = false
                AND c.is_active = true
                AND c.city IS NOT NULL
                AND c.city != ''
            GROUP BY c.city, c.region
            ORDER BY product_count DESC
        """)
        
        goods_result = await session.execute(goods_query)
        goods_data = goods_result.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —É—Å–ª—É–≥ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        services_query = text("""
            SELECT 
                c.city as city_name,
                c.region as region_name,
                COUNT(p.id) as service_count
            FROM companies c
            JOIN products p ON c.id = p.company_id
            WHERE p.type = 'SERVICE'
                AND p.is_deleted = false 
                AND p.is_hidden = false
                AND c.is_active = true
                AND c.city IS NOT NULL
                AND c.city != ''
            GROUP BY c.city, c.region
            ORDER BY service_count DESC
        """)
        
        services_result = await session.execute(services_query)
        services_data = services_result.fetchall()
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–º–ø–∞–Ω–∏–π –ø–æ –≥–æ—Ä–æ–¥–∞–º
        companies_query = text("""
            SELECT 
                c.city as city_name,
                c.region as region_name,
                COUNT(c.id) as company_count
            FROM companies c
            WHERE c.is_active = true
                AND c.city IS NOT NULL
                AND c.city != ''
            GROUP BY c.city, c.region
            ORDER BY company_count DESC
        """)
        
        companies_result = await session.execute(companies_query)
        companies_data = companies_result.fetchall()
        
        return {
            "goods_cities": len(goods_data),
            "services_cities": len(services_data),
            "companies_cities": len(companies_data),
            "total_goods": sum(row.product_count for row in goods_data),
            "total_services": sum(row.service_count for row in services_data),
            "total_companies": sum(row.company_count for row in companies_data)
        }


@celery_app.task(bind=True, name="app.tasks.cache_tasks.refresh_all_caches")
def refresh_all_caches(self):
    """–ü–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –ø–æ–ª–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –≤—Å–µ—Ö –∫—ç—à–µ–π")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        results = {}
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –∏ –≥–æ—Ä–æ–¥–æ–≤
        results["product_city_cache"] = asyncio.run(_update_product_city_cache_async())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫—ç—à –∫–æ–º–ø–∞–Ω–∏–π –∏ –≥–æ—Ä–æ–¥–æ–≤
        results["company_city_cache"] = asyncio.run(_update_company_city_cache_async())
        
        # –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º
        results["cities_product_count"] = asyncio.run(_update_cities_product_count_async())
        
        logger.info(f"‚úÖ –í—Å–µ –∫—ç—à–∏ –æ–±–Ω–æ–≤–ª–µ–Ω—ã: {results}")
        return results
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª–Ω–æ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∫—ç—à–µ–π: {e}")
        raise self.retry(exc=e, countdown=120, max_retries=2)


@celery_app.task(bind=True, name="app.tasks.cache_tasks.clear_all_caches")
def clear_all_caches(self):
    """–û—á–∏—â–∞–µ—Ç –≤—Å–µ –∫—ç—à–∏"""
    try:
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –æ—á–∏—Å—Ç–∫—É –≤—Å–µ—Ö –∫—ç—à–µ–π")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –≤ event loop
        result = asyncio.run(_clear_all_caches_async())
        
        logger.info("‚úÖ –í—Å–µ –∫—ç—à–∏ –æ—á–∏—â–µ–Ω—ã")
        return result
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∫—ç—à–µ–π: {e}")
        raise self.retry(exc=e, countdown=60, max_retries=3)


async def _clear_all_caches_async() -> Dict[str, Any]:
    """–ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—á–∏—Å—Ç–∫–∏ –≤—Å–µ—Ö –∫—ç—à–µ–π"""
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–µ—Å—Å–∏—é –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    async with AsyncSessionLocal() as session:
        
        # –û—á–∏—â–∞–µ–º –≤—Å–µ –∫—ç—à-—Ç–∞–±–ª–∏—Ü—ã
        await session.execute(delete(ProductCityMapping))
        await session.execute(delete(ActiveCitiesCache))
        await session.commit()
        
        return {"status": "success", "message": "All caches cleared"}
