#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –≥–æ—Ä–æ–¥–æ–≤ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ú–∞—Ä–∏–π –≠–ª –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime

# –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –ø–µ—Ä–µ–¥ –∏–º–ø–æ—Ä—Ç–æ–º
os.environ.setdefault('POSTGRES_SERVER', 'localhost')
os.environ.setdefault('POSTGRES_USER', 'postgres')
os.environ.setdefault('POSTGRES_PASSWORD', 'postgres')
os.environ.setdefault('POSTGRES_DB', 'business_trade')

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent))

from app.db.base import AsyncSessionLocal
from app.api.common.models.region import Region
from app.api.common.models.city import City
from sqlalchemy import select


async def add_mari_cities():
    """–î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –ú–∞—Ä–∏–π –≠–ª"""
    print("üó∫Ô∏è –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ú–∞—Ä–∏–π –≠–ª...")
    
    # –î–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –ú–∞—Ä–∏–π –≠–ª
    mari_cities = [
        {
            "name": "–ô–æ—à–∫–∞—Ä-–û–ª–∞",
            "population": 280000,
            "is_million_city": False,
            "is_regional_center": True
        },
        {
            "name": "–í–æ–ª–∂—Å–∫",
            "population": 54000,
            "is_million_city": False,
            "is_regional_center": False
        },
        {
            "name": "–ö–æ–∑—å–º–æ–¥–µ–º—å—è–Ω—Å–∫",
            "population": 20000,
            "is_million_city": False,
            "is_regional_center": False
        },
        {
            "name": "–ó–≤–µ–Ω–∏–≥–æ–≤–æ",
            "population": 12000,
            "is_million_city": False,
            "is_regional_center": False
        },
        {
            "name": "–°–æ–≤–µ—Ç—Å–∫–∏–π",
            "population": 11000,
            "is_million_city": False,
            "is_regional_center": False
        },
        {
            "name": "–ú–æ—Ä–∫–∏",
            "population": 10000,
            "is_million_city": False,
            "is_regional_center": False
        },
        {
            "name": "–Æ—Ä–∏–Ω–æ",
            "population": 4000,
            "is_million_city": False,
            "is_regional_center": False
        }
    ]
    
    async with AsyncSessionLocal() as db:
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏–æ–Ω "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª"
        region_result = await db.execute(
            select(Region)
            .where(Region.name == "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª")
        )
        region = region_result.scalar_one_or_none()
        
        if not region:
            print("‚ùå –†–µ–≥–∏–æ–Ω '–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª' –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–≥–∏–æ–Ω: {region.name} (ID: {region.id}, –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥ ID: {region.federal_district_id})")
        
        added_count = 0
        for city_data in mari_cities:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ –≥–æ—Ä–æ–¥
            city_result = await db.execute(
                select(City)
                .where(City.name == city_data["name"])
                .where(City.region_id == region.id)
            )
            existing_city = city_result.scalar_one_or_none()
            
            if existing_city:
                print(f"‚ö†Ô∏è  –ì–æ—Ä–æ–¥ {city_data['name']} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç (ID: {existing_city.id})")
                continue
            
            # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–π –≥–æ—Ä–æ–¥
            new_city = City(
                region_id=region.id,
                federal_district_id=region.federal_district_id,
                country_id=region.country_id,
                name=city_data["name"],
                population=city_data["population"],
                is_million_city=city_data["is_million_city"],
                is_regional_center=city_data["is_regional_center"],
                is_active=True,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            db.add(new_city)
            added_count += 1
            print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω –≥–æ—Ä–æ–¥: {city_data['name']} (–Ω–∞—Å–µ–ª–µ–Ω–∏–µ: {city_data['population']})")
        
        await db.commit()
        print(f"\nüéâ –í—Å–µ–≥–æ –¥–æ–±–∞–≤–ª–µ–Ω–æ/–ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {added_count} –Ω–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    async with AsyncSessionLocal() as db:
        result = await db.execute(
            select(City)
            .join(Region)
            .where(Region.name == "–†–µ—Å–ø—É–±–ª–∏–∫–∞ –ú–∞—Ä–∏–π –≠–ª")
        )
        cities = result.scalars().all()
        print(f"\nüìä –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –†–µ—Å–ø—É–±–ª–∏–∫–µ –ú–∞—Ä–∏–π –≠–ª: {len(cities)}")
        print("\n–°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤:")
        for city in sorted(cities, key=lambda x: x.population or 0, reverse=True):
            print(f"  - {city.name} (–Ω–∞—Å–µ–ª–µ–Ω–∏–µ: {city.population or '–Ω–µ —É–∫–∞–∑–∞–Ω–æ'})")


if __name__ == "__main__":
    asyncio.run(add_mari_cities())

