#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö
"""

import asyncio
import random
import sys
from pathlib import Path
from datetime import datetime

sys.path.append(str(Path(__file__).parent))

from sqlalchemy import select
from app.db.base import AsyncSessionLocal
from app.api.company.models.company import Company
from app.api.common.models.city import City
from app.api.products.models.product import Product, ProductType


PRODUCT_NAMES = [
    "–¶–µ–º–µ–Ω—Ç", "–ö–∏—Ä–ø–∏—á", "–ë–µ—Ç–æ–Ω", "–ê—Ä–º–∞—Ç—É—Ä–∞", "–ü–ª–∏—Ç–∫–∞", "–°–∞–π–¥–∏–Ω–≥", "–ü—Ä–æ—Ñ–Ω–∞—Å—Ç–∏–ª",
    "–ì–∏–ø—Å–æ–∫–∞—Ä—Ç–æ–Ω", "–í–∞–≥–æ–Ω–∫–∞", "–û–°–ü", "–§–∞–Ω–µ—Ä–∞", "–î–°–ü", "–î–æ—Å–∫–∞", "–ë—Ä—É—Å",
    "–†—É–±–µ—Ä–æ–∏–¥", "–ú–µ—Ç–∞–ª–ª–æ—á–µ—Ä–µ–ø–∏—Ü–∞", "–®–∏—Ñ–µ—Ä", "–ö–µ—Ä–∞–º–∑–∏—Ç", "–ü–µ—Å–æ–∫", "–©–µ–±–µ–Ω—å",
    "–†–∞–¥–∏–∞—Ç–æ—Ä", "–¢—Ä—É–±–∞", "–§–∏—Ç–∏–Ω–≥", "–ö—Ä–∞–Ω", "–°–º–µ—Å–∏—Ç–µ–ª—å", "–í–∞–Ω–Ω–∞", "–£–Ω–∏—Ç–∞–∑",
    "–ö—Ä–∞–Ω", "–õ–µ–π–∫–∞", "–®–ª–∞–Ω–≥", "–®–ª–∞–Ω–≥", "–ü–æ–ª–∏–≤", "–ö—Ä–∞–Ω", "–ö–æ–≤—à", "–í–µ–¥—Ä–æ"
]


SERVICE_NAMES = [
    "–£–∫–ª–∞–¥–∫–∞ –ø–ª–∏—Ç–∫–∏", "–ú–æ–Ω—Ç–∞–∂ –ø–æ—Ç–æ–ª–∫–∞", "–ú–æ–Ω—Ç–∞–∂ —Å—Ç–µ–Ω", "–£—Ç–µ–ø–ª–µ–Ω–∏–µ",
    "–ü–æ–∫—Ä–∞—Å–∫–∞", "–û–∫–ª–µ–π–∫–∞ –æ–±–æ—è–º–∏", "–®—Ç—É–∫–∞—Ç—É—Ä–∫–∞", "–°–∞–Ω—Ç–µ—Ö–Ω–∏–∫–∞",
    "–≠–ª–µ–∫—Ç—Ä–æ–º–æ–Ω—Ç–∞–∂", "–†–µ–º–æ–Ω—Ç", "–û—Ç–¥–µ–ª–∫–∞", "–î–∏–∑–∞–π–Ω", "–ö–æ–Ω—Å—É–ª—å—Ç–∞—Ü–∏—è",
    "–î–æ—Å—Ç–∞–≤–∫–∞", "–ü–æ–≥—Ä—É–∑–∫–∞", "–†–∞–∑–≥—Ä—É–∑–∫–∞", "–î–µ–º–æ–Ω—Ç–∞–∂", "–ú–æ–Ω—Ç–∞–∂",
    "–£—Å—Ç–∞–Ω–æ–≤–∫–∞", "–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ"
]


UNITS_OF_MEASUREMENT = ["—à—Ç", "–∫–≥", "—Ç", "–º¬≤", "–º¬≥", "–º", "–ø.–º", "–ª", "—á–∞—Å", "–¥–µ–Ω—å"]


async def add_products_by_cities():
    """–î–æ–±–∞–≤–ª—è–µ—Ç –ø—Ä–æ–¥—É–∫—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ–º–ø–∞–Ω–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤"""
    print("üöÄ –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã–µ –≥–æ—Ä–æ–¥–∞...")
    
    async with AsyncSessionLocal() as session:
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –≥–æ—Ä–æ–¥–∞
        result = await session.execute(select(City))
        cities = result.scalars().all()
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
        result = await session.execute(select(Company))
        companies = result.scalars().all()
        
        print(f"–ù–∞–π–¥–µ–Ω–æ –≥–æ—Ä–æ–¥–æ–≤: {len(cities)}")
        print(f"–ù–∞–π–¥–µ–Ω–æ –∫–æ–º–ø–∞–Ω–∏–π: {len(companies)}")
        
        if len(companies) == 0:
            print("‚ùå –ù–µ—Ç –∫–æ–º–ø–∞–Ω–∏–π –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
            return
        
        # –°–æ–∑–¥–∞–µ–º 20 –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –¥–ª—è —Å–ª—É—á–∞–π–Ω—ã—Ö –∫–æ–º–ø–∞–Ω–∏–π –∏–∑ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤
        products_to_add = 20
        products_created = 0
        existing_slugs = set()
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ slug –ø—Ä–æ–¥—É–∫—Ç–æ–≤
        result = await session.execute(select(Product.slug))
        existing_slugs.update([slug for slug in result.scalars().all()])
        
        for i in range(products_to_add):
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—É—é –∫–æ–º–ø–∞–Ω–∏—é
            company = random.choice(companies)
            
            # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ –∏–º—è –ø—Ä–æ–¥—É–∫—Ç–∞ –∏–ª–∏ —É—Å–ª—É–≥–∏
            is_service = random.random() < 0.4  # 40% —É—Å–ª—É–≥
            
            if is_service:
                name = random.choice(SERVICE_NAMES)
                product_type = ProductType.SERVICE
                unit = "—á–∞—Å"
            else:
                name = random.choice(PRODUCT_NAMES)
                product_type = ProductType.GOOD
                unit = random.choice(UNITS_OF_MEASUREMENT)
            
            # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Å –≥–æ—Ä–æ–¥–æ–º
            unique_name = f"{name} - {company.city}"
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π slug
            base_slug = f"{name.lower().replace(' ', '-')}-{company.slug}"
            slug = base_slug
            counter = 1
            while slug in existing_slugs:
                slug = f"{base_slug}-{counter}"
                counter += 1
            existing_slugs.add(slug)
            
            # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ–¥—É–∫—Ç
            product = Product(
                name=unique_name,
                slug=slug,
                description=f"–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π {name.lower()} –æ—Ç –∫–æ–º–ø–∞–Ω–∏–∏ {company.name}. –î–æ—Å—Ç–∞–≤–∫–∞ –≤ {company.city}.",
                article=f"ART-{random.randint(100000, 999999)}",
                type=product_type,
                price=random.uniform(500, 50000),
                images=[],
                characteristics=[
                    {"name": "–ú–∞—Ç–µ—Ä–∏–∞–ª", "value": random.choice(["–°—Ç–∞–ª—å", "–ü–ª–∞—Å—Ç–∏–∫", "–î–µ—Ä–µ–≤–æ", "–ë–µ—Ç–æ–Ω"])},
                    {"name": "–†–∞–∑–º–µ—Ä", "value": f"{random.randint(10, 1000)}x{random.randint(10, 1000)}"},
                    {"name": "–í–µ—Å", "value": f"{random.randint(1, 100)} –∫–≥"}
                ],
                is_hidden=False,
                is_deleted=False,
                unit_of_measurement=unit,
                company_id=company.id
            )
            
            session.add(product)
            products_created += 1
            
            print(f"‚úÖ –°–æ–∑–¥–∞–Ω –ø—Ä–æ–¥—É–∫—Ç {products_created}/{products_to_add}: {unique_name} –≤ –≥–æ—Ä–æ–¥–µ {company.city}")
            
            # –î–µ–ª–∞–µ–º commit –∫–∞–∂–¥—ã–µ 5 –ø—Ä–æ–¥—É–∫—Ç–æ–≤
            if products_created % 5 == 0:
                await session.commit()
                print(f"   –°–æ—Ö—Ä–∞–Ω–µ–Ω–æ {products_created} –ø—Ä–æ–¥—É–∫—Ç–æ–≤...")
        
        await session.commit()
        
        print(f"\nüéâ –°–æ–∑–¥–∞–Ω–æ {products_created} –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ —Ä–∞–∑–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        result = await session.execute(select(Product))
        all_products = result.scalars().all()
        print(f"\nüìä –í—Å–µ–≥–æ –ø—Ä–æ–¥—É–∫—Ç–æ–≤ –≤ –±–∞–∑–µ: {len(all_products)}")


if __name__ == "__main__":
    asyncio.run(add_products_by_cities())

