#!/usr/bin/env python3
"""
Скрипт для парсинга городов с сайта superresearch.ru и добавления их в базу данных
"""

import asyncio
import sys
import os
from pathlib import Path
from datetime import datetime
from typing import Dict, List, Optional
import re

import httpx
from bs4 import BeautifulSoup

# Устанавливаем переменные окружения перед импортом
os.environ.setdefault('POSTGRES_SERVER', 'localhost')
os.environ.setdefault('POSTGRES_USER', 'postgres')
os.environ.setdefault('POSTGRES_PASSWORD', 'postgres')
os.environ.setdefault('POSTGRES_DB', 'buisnes_kufar')  # Название БД

# Добавляем путь к приложению
sys.path.append(str(Path(__file__).parent))

from app.db.base import AsyncSessionLocal
from app.api.common.models.region import Region
from app.api.common.models.city import City
from sqlalchemy import select


# Маппинг названий регионов с superresearch.ru на названия в нашей БД
REGION_NAME_MAPPING = {
    "Республика Адыгея": "Республика Адыгея",
    "Республика Алтай": "Республика Алтай",
    "Алтайский край": "Алтайский край",
    "Амурская область": "Амурская область",
    "Архангельская область": "Архангельская область",
    "Астраханская область": "Астраханская область",
    "Республика Башкортостан": "Республика Башкортостан",
    "Белгородская область": "Белгородская область",
    "Брянская область": "Брянская область",
    "Республика Бурятия": "Республика Бурятия",
    "Владимирская область": "Владимирская область",
    "Волгоградская область": "Волгоградская область",
    "Вологодская область": "Вологодская область",
    "Воронежская область": "Воронежская область",
    "Республика Дагестан": "Республика Дагестан",
    "Еврейская автономная область": "Еврейская автономная область",
    "Забайкальский край": "Забайкальский край",
    "Ивановская область": "Ивановская область",
    "Республика Ингушетия": "Республика Ингушетия",
    "Иркутская область": "Иркутская область",
    "Кабардино-Балкарская Республика": "Кабардино-Балкарская Республика",
    "Калининградская область": "Калининградская область",
    "Республика Калмыкия": "Республика Калмыкия",
    "Калужская область": "Калужская область",
    "Камчатский край": "Камчатский край",
    "Карачаево-Черкесская Республика": "Карачаево-Черкесская Республика",
    "Республика Карелия": "Республика Карелия",
    "Кемеровская область": "Кемеровская область",
    "Кировская область": "Кировская область",
    "Республика Коми": "Республика Коми",
    "Костромская область": "Костромская область",
    "Краснодарский край": "Краснодарский край",
    "Красноярский край": "Красноярский край",
    "Курганская область": "Курганская область",
    "Курская область": "Курская область",
    "Ленинградская область": "Ленинградская область",
    "Липецкая область": "Липецкая область",
    "Магаданская область": "Магаданская область",
    "Республика Марий Эл": "Республика Марий Эл",
    "Республика Мордовия": "Республика Мордовия",
    "Московская область": "Московская область",
    "Мурманская область": "Мурманская область",
    "Нижегородская область": "Нижегородская область",
    "Новгородская область": "Новгородская область",
    "Новосибирская область": "Новосибирская область",
    "Омская область": "Омская область",
    "Оренбургская область": "Оренбургская область",
    "Орловская область": "Орловская область",
    "Пензенская область": "Пензенская область",
    "Пермский край": "Пермский край",
    "Псковская область": "Псковская область",
    "Ростовская область": "Ростовская область",
    "Рязанская область": "Рязанская область",
    "Самарская область": "Самарская область",
    "Саратовская область": "Саратовская область",
    "Сахалинская область": "Сахалинская область",
    "Свердловская область": "Свердловская область",
    "Республика Северная Осетия": "Республика Северная Осетия",
    "Смоленская область": "Смоленская область",
    "Ставропольский край": "Ставропольский край",
    "Тамбовская область": "Тамбовская область",
    "Республика Татарстан": "Республика Татарстан",
    "Тверская область": "Тверская область",
    "Томская область": "Томская область",
    "Тульская область": "Тульская область",
    "Республика Тыва": "Республика Тыва",
    "Тюменская область": "Тюменская область",
    "Удмуртская Республика": "Удмуртская Республика",
    "Ульяновская область": "Ульяновская область",
    "Хабаровский край": "Хабаровский край",
    "Республика Хакасия": "Республика Хакасия",
    "Челябинская область": "Челябинская область",
    "Чеченская Республика": "Чеченская Республика",
    "Чувашская Республика": "Чувашская Республика",
    "Чукотский автономный округ": "Чукотский автономный округ",
    "Республика Саха (Якутия)": "Республика Саха (Якутия)",
    "Ямало-Ненецкий автономный округ": "Ямало-Ненецкий автономный округ",
    "Ярославская область": "Ярославская область",
}


# ID страниц для каждой области (с сайта superresearch.ru)
REGION_PAGE_IDS = {
    "Республика Адыгея": 825,
    "Республика Алтай": 826,
    "Алтайский край": 827,
    "Амурская область": 828,
    "Архангельская область": 819,
    "Астраханская область": 829,
    "Республика Башкортостан": 830,
    "Белгородская область": 831,
    "Брянская область": 832,
    "Республика Бурятия": 833,
    "Владимирская область": 834,
    "Волгоградская область": 835,
    "Вологодская область": 836,
    "Воронежская область": 815,
    "Республика Дагестан": 837,
    "Еврейская автономная область": 838,
    "Забайкальский край": 839,
    "Ивановская область": 813,
    "Республика Ингушетия": 840,
    "Иркутская область": 841,
    "Кабардино-Балкарская Республика": 842,
    "Калининградская область": 843,
    "Республика Калмыкия": 844,
    "Калужская область": 818,
    "Камчатский край": 845,
    "Карачаево-Черкесская Республика": 846,
    "Республика Карелия": 847,
    "Кемеровская область": 817,
    "Кировская область": 848,
    "Республика Коми": 849,
    "Костромская область": 850,
    "Краснодарский край": 851,
    "Красноярский край": 852,
    "Курганская область": 853,
    "Курская область": 854,
    "Ленинградская область": 855,
    "Липецкая область": 856,
    "Магаданская область": 857,
    "Республика Марий Эл": 858,
    "Республика Мордовия": 859,
    "Московская область": 860,
    "Мурманская область": 820,
    "Нижегородская область": 861,
    "Новгородская область": 822,
    "Новосибирская область": 862,
    "Омская область": 863,
    "Оренбургская область": 864,
    "Орловская область": 865,
    "Пензенская область": 866,
    "Пермский край": 867,
    "Псковская область": 868,
    "Ростовская область": 823,
    "Рязанская область": 869,
    "Самарская область": 812,
    "Саратовская область": 870,
    "Сахалинская область": 871,
    "Свердловская область": 824,
    "Республика Северная Осетия": 872,
    "Смоленская область": 873,
    "Ставропольский край": 874,
    "Тамбовская область": 821,
    "Республика Татарстан": 875,
    "Тверская область": 876,
    "Томская область": 877,
    "Тульская область": 878,
    "Республика Тыва": 879,
    "Тюменская область": 814,
    "Удмуртская Республика": 880,
    "Ульяновская область": 881,
    "Хабаровский край": 882,
    "Республика Хакасия": 883,
    "Челябинская область": 809,
    "Чеченская Республика": 884,
    "Чувашская Республика": 816,
    "Чукотский автономный округ": 885,
    "Республика Саха (Якутия)": 886,
    "Ямало-Ненецкий автономный округ": 887,
    "Ярославская область": 810,
}


async def parse_cities_from_page(region_name: str, page_id: int) -> List[str]:
    """
    Парсит список городов со страницы superresearch.ru
    
    Args:
        region_name: Название региона
        page_id: ID страницы на superresearch.ru
        
    Returns:
        List[str]: Список названий городов
    """
    url = f"https://superresearch.ru/?id={page_id}"
    
    try:
        async with httpx.AsyncClient(timeout=30.0) as client:
            response = await client.get(url)
            response.raise_for_status()
            
            soup = BeautifulSoup(response.text, 'html.parser')
            
            # Получаем весь текст страницы
            full_text = soup.get_text()
            
            # Ищем паттерн "Города X в алфавитном порядке:" 
            # Варианты: "Города Республика Марий-Эл в алфавитном порядке:"
            # или "Города Х области в алфавитном порядке:"
            pattern = r'Города\s+.*?\s+в\s+алфавитном\s+порядке:'
            
            import re
            match = re.search(pattern, full_text)
            
            cities = []
            
            if match:
                # Берем текст после маркера
                start_pos = match.end()
                text_after_marker = full_text[start_pos:]
                
                # Разбиваем по строкам
                lines = text_after_marker.split('\n')
                
                for line in lines:
                    line = line.strip()
                    
                    # Пропускаем пустые строки
                    if not line:
                        continue
                    
                    # Проверяем, похоже ли на название города
                    # Имя собственное: начинается с заглавной буквы
                    if len(line) > 2 and len(line) < 60 and line[0].isupper():
                        # Пропускаем служебную информацию
                        if not any(skip in line for skip in ['©', 'Тел.', 'Россия', 'ул.', 'д.', 'п.', '+7']):
                            cities.append(line)
                            
                            # Останавливаемся когда встречаем маркеры конца списка
                            if '©' in line or 'Тел.' in line:
                                break
            else:
                # Fallback: ищем в таблицах
                print(f"  ⚠️  Маркер 'в алфавитном порядке' не найден, используем fallback")
                
                # Ищем слова, которые выглядят как названия населенных пунктов
                # (начинаются с заглавной буквы, состоят из букв и пробелов/дефисов)
                all_text = soup.get_text()
                words = all_text.split()
                
                for word in words:
                    word = word.strip()
                    # Проверяем паттерн имени собственного
                    if (len(word) > 2 and len(word) < 30 and 
                        word[0].isupper() and word.isalnum()):
                        # Пропускаем служебные слова
                        if word not in ['Главная', 'RAI', 'Русский', 'English', 'Deutsch', 'Контакты']:
                            cities.append(word)
            
            # Очищаем от дубликатов и фильтруем
            unique_cities = []
            seen = set()
            
            for city in cities:
                # Нормализуем: убираем лишние пробелы и символы
                city_normalized = ' '.join(city.split())
                city_normalized = city_normalized.strip()
                
                # Проверяем, что это не слишком короткое или длинное слово
                if 2 < len(city_normalized) < 50:
                    # Проверяем, что содержит хотя бы одну букву
                    if any(c.isalpha() for c in city_normalized):
                        # Для сравнения используем lower()
                        city_key = city_normalized.lower()
                        
                        # Проверяем дубликаты (регистронезависимо)
                        if city_key not in seen:
                            seen.add(city_key)
                            unique_cities.append(city_normalized)
            
            print(f"  📍 Найдено уникальных городов на странице для {region_name}: {len(unique_cities)}")
            
            return unique_cities
            
    except Exception as e:
        print(f"  ❌ Ошибка при парсинге {region_name}: {str(e)}")
        import traceback
        traceback.print_exc()
        return []


async def add_cities_to_db():
    """
    Основная функция: парсит города с superresearch.ru и добавляет их в БД
    """
    print("🚀 Начинаем парсинг городов с superresearch.ru...\n")
    
    async with AsyncSessionLocal() as db:
        # Получаем все регионы из БД
        regions_result = await db.execute(
            select(Region).where(Region.is_active == True)
        )
        db_regions = {r.name: r for r in regions_result.scalars().all()}
        
        print(f"✅ Найдено {len(db_regions)} регионов в базе данных\n")
        
        total_cities_added = 0
        total_regions_processed = 0
        
        # Обрабатываем каждый регион
        for region_name, page_id in REGION_PAGE_IDS.items():
            if region_name not in db_regions:
                print(f"⚠️  Регион '{region_name}' не найден в базе данных, пропускаем")
                continue
            
            db_region = db_regions[region_name]
            print(f"\n{'='*60}")
            print(f"🌍 Обрабатываем: {region_name}")
            print(f"{'='*60}")
            
            # Парсим города со страницы
            cities = await parse_cities_from_page(region_name, page_id)
            
            if not cities:
                print(f"  ⚠️  Не удалось получить города для {region_name}")
                continue
            
            # Получаем список уже существующих городов для этого региона
            existing_cities_result = await db.execute(
                select(City.name)
                .where(City.region_id == db_region.id)
            )
            existing_city_names = {city[0].lower().strip() for city in existing_cities_result.all()}
            
            print(f"  📋 Уже существует городов в БД: {len(existing_city_names)}")
            
            # Добавляем города в БД
            cities_added = 0
            cities_skipped = 0
            
            for city_name in cities:
                # Нормализуем название для сравнения
                city_normalized = city_name.lower().strip()
                
                # Проверяем, существует ли город (регистронезависимое сравнение)
                if city_normalized in existing_city_names:
                    cities_skipped += 1
                    continue
                
                # Создаем новый город
                new_city = City(
                    region_id=db_region.id,
                    federal_district_id=db_region.federal_district_id,
                    country_id=db_region.country_id,
                    name=city_name,
                    population=0,  # Население не указано на сайте
                    is_million_city=False,
                    is_regional_center=False,
                    is_active=True,
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow()
                )
                db.add(new_city)
                cities_added += 1
            
            await db.commit()
            
            if cities_skipped > 0:
                print(f"  ⏭️  Пропущено дубликатов/существующих: {cities_skipped}")
            
            total_cities_added += cities_added
            total_regions_processed += 1
            
            print(f"  ✅ Добавлено городов: {cities_added}")
            
            # Небольшая задержка между запросами
            await asyncio.sleep(0.5)
        
        print(f"\n{'='*60}")
        print(f"🎉 ЗАВЕРШЕНО!")
        print(f"{'='*60}")
        print(f"📊 Обработано регионов: {total_regions_processed}")
        print(f"📊 Добавлено городов: {total_cities_added}")


if __name__ == "__main__":
    asyncio.run(add_cities_to_db())

