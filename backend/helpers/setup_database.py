#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–∞–±–ª–∏—Ü –∏ –Ω–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞–º–∏
"""
import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

from sqlalchemy.ext.asyncio import AsyncSession
from app.db.base import AsyncSessionLocal, create_db_and_tables
from app.api.common.models import Country, FederalDistrict, Region, City


async def setup_database():
    """–°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –∏ –Ω–∞–ø–æ–ª–Ω—è–µ–º –¥–∞–Ω–Ω—ã–º–∏"""
    
    print("üîß –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    await create_db_and_tables()
    print("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã!")
    
    print("üìä –ù–∞–ø–æ–ª–Ω—è–µ–º –±–∞–∑—É —Ç–µ—Å—Ç–æ–≤—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏...")
    await create_sample_data()
    print("‚úÖ –î–∞–Ω–Ω—ã–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã!")


async def create_sample_data():
    """–°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ —Ñ–∏–ª—å—Ç—Ä–∞"""
    
    async with AsyncSessionLocal() as session:
        # –°–æ–∑–¥–∞–µ–º —Å—Ç—Ä–∞–Ω—É –†–æ—Å—Å–∏—è
        russia = Country(
            code="RU",
            name="–†–æ—Å—Å–∏—è",
            is_active=True
        )
        session.add(russia)
        await session.flush()  # –ü–æ–ª—É—á–∞–µ–º ID
        
        # –°–æ–∑–¥–∞–µ–º —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞
        federal_districts = [
            {"name": "–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "code": "CFO"},
            {"name": "–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "code": "NWFO"},
            {"name": "–Æ–∂–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "code": "SFO"},
            {"name": "–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "code": "DFO"},
            {"name": "–°–∏–±–∏—Ä—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "code": "SIBFO"},
            {"name": "–£—Ä–∞–ª—å—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "code": "UFO"},
            {"name": "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "code": "PFO"},
            {"name": "–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥", "code": "NCFO"}
        ]
        
        fd_objects = []
        for fd_data in federal_districts:
            fd = FederalDistrict(
                country_id=russia.id,
                name=fd_data["name"],
                code=fd_data["code"],
                is_active=True
            )
            session.add(fd)
            fd_objects.append(fd)
        
        await session.flush()
        
        # –°–æ–∑–¥–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω–æ–≥–æ –æ–∫—Ä—É–≥–∞
        regions_data = {
            "CFO": [
                {"name": "–ú–æ—Å–∫–≤–∞", "code": "MOS"},
                {"name": "–ú–æ—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "MOS_OBL"},
                {"name": "–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "BEL"},
                {"name": "–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "BRY"},
                {"name": "–í–ª–∞–¥–∏–º–∏—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "VLA"},
                {"name": "–í–æ—Ä–æ–Ω–µ–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "VOR"},
                {"name": "–ò–≤–∞–Ω–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "IVA"},
                {"name": "–ö–∞–ª—É–∂—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "KAL"},
                {"name": "–ö–æ—Å—Ç—Ä–æ–º—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "KOS"},
                {"name": "–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "KUR"},
                {"name": "–õ–∏–ø–µ—Ü–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "LIP"},
                {"name": "–û—Ä–ª–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "ORL"},
                {"name": "–†—è–∑–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "RYA"},
                {"name": "–°–º–æ–ª–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "SMO"},
                {"name": "–¢–∞–º–±–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "TAM"},
                {"name": "–¢–≤–µ—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "TVE"},
                {"name": "–¢—É–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "TUL"},
                {"name": "–Ø—Ä–æ—Å–ª–∞–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "YAR"}
            ],
            "NWFO": [
                {"name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "code": "SPB"},
                {"name": "–õ–µ–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "LEN"},
                {"name": "–ê—Ä—Ö–∞–Ω–≥–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "ARK"},
                {"name": "–í–æ–ª–æ–≥–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "VOL"},
                {"name": "–ö–∞–ª–∏–Ω–∏–Ω–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "KAL"},
                {"name": "–ö–∞—Ä–µ–ª–∏—è", "code": "KAR"},
                {"name": "–ö–æ–º–∏", "code": "KOM"},
                {"name": "–ú—É—Ä–º–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "MUR"},
                {"name": "–ù–µ–Ω–µ—Ü–∫–∏–π –∞–≤—Ç–æ–Ω–æ–º–Ω—ã–π –æ–∫—Ä—É–≥", "code": "NEN"},
                {"name": "–ù–æ–≤–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "NOV"},
                {"name": "–ü—Å–∫–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "PSK"}
            ],
            "SFO": [
                {"name": "–ê–¥—ã–≥–µ—è", "code": "ADY"},
                {"name": "–ê—Å—Ç—Ä–∞—Ö–∞–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "AST"},
                {"name": "–í–æ–ª–≥–æ–≥—Ä–∞–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "VOL"},
                {"name": "–ö–∞–ª–º—ã–∫–∏—è", "code": "KAL"},
                {"name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä—Å–∫–∏–π –∫—Ä–∞–π", "code": "KRA"},
                {"name": "–†–æ—Å—Ç–æ–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å", "code": "ROS"},
                {"name": "–ö—Ä—ã–º", "code": "KRY"},
                {"name": "–°–µ–≤–∞—Å—Ç–æ–ø–æ–ª—å", "code": "SEV"}
            ]
        }
        
        region_objects = []
        for fd_code, regions in regions_data.items():
            fd_obj = next(fd for fd in fd_objects if fd.code == fd_code)
            for region_data in regions:
                region = Region(
                    country_id=russia.id,
                    federal_district_id=fd_obj.id,
                    name=region_data["name"],
                    code=region_data["code"],
                    is_active=True
                )
                session.add(region)
                region_objects.append(region)
        
        await session.flush()
        
        # –°–æ–∑–¥–∞–µ–º –≥–æ—Ä–æ–¥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
        cities_data = {
            "MOS": [
                {"name": "–ú–æ—Å–∫–≤–∞", "population": 12615000, "is_million_city": True, "is_regional_center": True}
            ],
            "MOS_OBL": [
                {"name": "–ü–æ–¥–æ–ª—å—Å–∫", "population": 300000, "is_million_city": False, "is_regional_center": False},
                {"name": "–•–∏–º–∫–∏", "population": 250000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ö–æ—Ä–æ–ª—ë–≤", "population": 220000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ú—ã—Ç–∏—â–∏", "population": 200000, "is_million_city": False, "is_regional_center": False},
                {"name": "–õ—é–±–µ—Ä—Ü—ã", "population": 200000, "is_million_city": False, "is_regional_center": False},
                {"name": "–≠–ª–µ–∫—Ç—Ä–æ—Å—Ç–∞–ª—å", "population": 150000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ñ–µ–ª–µ–∑–Ω–æ–¥–æ—Ä–æ–∂–Ω—ã–π", "population": 140000, "is_million_city": False, "is_regional_center": False},
                {"name": "–°–µ—Ä–ø—É—Ö–æ–≤", "population": 130000, "is_million_city": False, "is_regional_center": False},
                {"name": "–û–¥–∏–Ω—Ü–æ–≤–æ", "population": 120000, "is_million_city": False, "is_regional_center": False},
                {"name": "–û—Ä–µ—Ö–æ–≤–æ-–ó—É–µ–≤–æ", "population": 120000, "is_million_city": False, "is_regional_center": False}
            ],
            "SPB": [
                {"name": "–°–∞–Ω–∫—Ç-–ü–µ—Ç–µ—Ä–±—É—Ä–≥", "population": 5400000, "is_million_city": True, "is_regional_center": True}
            ],
            "LEN": [
                {"name": "–ì–∞—Ç—á–∏–Ω–∞", "population": 95000, "is_million_city": False, "is_regional_center": False},
                {"name": "–í—ã–±–æ—Ä–≥", "population": 80000, "is_million_city": False, "is_regional_center": False},
                {"name": "–°–æ—Å–Ω–æ–≤—ã–π –ë–æ—Ä", "population": 65000, "is_million_city": False, "is_regional_center": False},
                {"name": "–¢–∏—Ö–≤–∏–Ω", "population": 60000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ö–∏—Ä–∏—à–∏", "population": 50000, "is_million_city": False, "is_regional_center": False}
            ],
            "KRA": [
                {"name": "–ö—Ä–∞—Å–Ω–æ–¥–∞—Ä", "population": 950000, "is_million_city": False, "is_regional_center": True},
                {"name": "–°–æ—á–∏", "population": 450000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ê—Ä–º–∞–≤–∏—Ä", "population": 190000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ù–æ–≤–æ—Ä–æ—Å—Å–∏–π—Å–∫", "population": 280000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ê–Ω–∞–ø–∞", "population": 82000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ì–µ–ª–µ–Ω–¥–∂–∏–∫", "population": 80000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ï–π—Å–∫", "population": 85000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ö—Ä–æ–ø–æ—Ç–∫–∏–Ω", "population": 80000, "is_million_city": False, "is_regional_center": False},
                {"name": "–°–ª–∞–≤—è–Ω—Å–∫-–Ω–∞-–ö—É–±–∞–Ω–∏", "population": 65000, "is_million_city": False, "is_regional_center": False},
                {"name": "–¢—É–∞–ø—Å–µ", "population": 60000, "is_million_city": False, "is_regional_center": False}
            ],
            "ROS": [
                {"name": "–†–æ—Å—Ç–æ–≤-–Ω–∞-–î–æ–Ω—É", "population": 1100000, "is_million_city": True, "is_regional_center": True},
                {"name": "–¢–∞–≥–∞–Ω—Ä–æ–≥", "population": 250000, "is_million_city": False, "is_regional_center": False},
                {"name": "–®–∞—Ö—Ç—ã", "population": 230000, "is_million_city": False, "is_regional_center": False},
                {"name": "–í–æ–ª–≥–æ–¥–æ–Ω—Å–∫", "population": 170000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ù–æ–≤–æ—á–µ—Ä–∫–∞—Å—Å–∫", "population": 170000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ë–∞—Ç–∞–π—Å–∫", "population": 130000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ù–æ–≤–æ—à–∞—Ö—Ç–∏–Ω—Å–∫", "population": 110000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ö–∞–º–µ–Ω—Å–∫-–®–∞—Ö—Ç–∏–Ω—Å–∫–∏–π", "population": 90000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ê–∑–æ–≤", "population": 82000, "is_million_city": False, "is_regional_center": False},
                {"name": "–ì—É–∫–æ–≤–æ", "population": 65000, "is_million_city": False, "is_regional_center": False}
            ]
        }
        
        for region_code, cities in cities_data.items():
            region_obj = next(r for r in region_objects if r.code == region_code)
            fd_obj = next(fd for fd in fd_objects if fd.id == region_obj.federal_district_id)
            
            for city_data in cities:
                city = City(
                    country_id=russia.id,
                    region_id=region_obj.id,
                    federal_district_id=fd_obj.id,
                    name=city_data["name"],
                    population=city_data["population"],
                    is_million_city=city_data["is_million_city"],
                    is_regional_center=city_data["is_regional_center"],
                    is_active=True
                )
                session.add(city)
        
        await session.commit()
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!")
        print(f"üìä –°–æ–∑–¥–∞–Ω–æ:")
        print(f"   - 1 —Å—Ç—Ä–∞–Ω–∞ (–†–æ—Å—Å–∏—è)")
        print(f"   - 8 —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–≥–æ–≤")
        print(f"   - 30+ —Ä–µ–≥–∏–æ–Ω–æ–≤")
        print(f"   - 50+ –≥–æ—Ä–æ–¥–æ–≤")


if __name__ == "__main__":
    asyncio.run(setup_database())
