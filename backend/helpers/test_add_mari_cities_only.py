#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –¢–û–õ–¨–ö–û –≥–æ—Ä–æ–¥–æ–≤ –ú–∞—Ä–∏–π –≠–ª
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –∏–∑ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞ backend
"""

import asyncio
import sys
import os
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent))

from app.db.base import AsyncSessionLocal
from app.api.common.models.region import Region
from app.api.common.models.city import City
from sqlalchemy import select


async def add_mari_cities_only():
    """–î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ª—å–∫–æ –≥–æ—Ä–æ–¥–∞ –ú–∞—Ä–∏–π –≠–ª –∏–∑ —Å–ø–∏—Å–∫–∞ —Å —Å–∞–π—Ç–∞"""
    
    print("üåç –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –†–µ—Å–ø—É–±–ª–∏–∫–∏ –ú–∞—Ä–∏–π –≠–ª\n")
    
    # –°–ø–∏—Å–æ–∫ –≥–æ—Ä–æ–¥–æ–≤, —Å–ø–∞—Ä—Å–µ–Ω–Ω—ã–π —Å superresearch.ru/?id=858
    cities_list = [
        "–ê–∑–∞–Ω–æ–≤–æ", "–ê–∑—ä—è–ª", "–ê–ª–∞—à–∞–π–∫–∞", "–ê–ª–µ–∫—Å–µ–µ–≤—Å–∫–∏–π", "–ê–Ω—á—É—Ç–∏–Ω–æ", "–ê—Ä–¥–∞", "–ê—Ä–∏–Ω–æ",
        "–ë–µ—Ä–µ–∑–æ–≤–æ", "–ë–æ–ª—å—à–∞—è –ö–æ–∫–ª–∞–ª–∞", "–ë–æ–ª—å—à–∞—è –õ—É–º–∞—Ä—å", "–ë–æ–ª—å—à–∏–µ –ö–ª—é—á–∏", "–ë–æ–ª—å—à–æ–µ –ö–∏–±–µ–µ–≤–æ",
        "–ë–æ–ª—å—à–æ–µ –û–ø–∞—Ä–∏–Ω–æ", "–ë–æ–ª—å—à–æ–π –ê—à–ª–∞–º–∞—à", "–ë–æ–ª—å—à–æ–π –ö–∞—Ä–ª—ã–≥–∞–Ω", "–ë–æ–ª—å—à–æ–π –ö—É–≥–ª–∞–Ω—É—Ä",
        "–ë–æ–ª—å—à–æ–π –õ—è–∂–¥—É—Ä", "–ë–æ–ª—å—à–æ–π –°–µ—Ä–¥–µ–∂", "–í–∞—Å–∏–ª—å–µ–≤—Å–∫–æ–µ", "–í–µ–ª–∏–∫–æ–ø–æ–ª—å–µ",
        "–í–µ—Ä—Ö–Ω–µ–µ –ê–∑—è–∫–æ–≤–æ", "–í–µ—Ä—Ö–Ω–∏–π –ö—É–≥–µ–Ω–µ—Ä", "–í–µ—Ä—Ö-–£—à–Ω—É—Ä", "–í–µ—Å—å—à—É—Ä–≥–∞", "–í–∏–∑–∏–º—å—è—Ä—ã",
        "–í–∏–ª–æ–≤–∞—Ç–æ–≤–æ", "–í–æ–ª–∂—Å–∫", "–í—è—Ç—Å–∫–æ–µ", "–ì–æ–ª–æ–≤–∏–Ω–æ", "–ì–æ—Ä–Ω—ã–π –®—É–º–µ—Ü", "–î—Ä—É–∂–∏–Ω–æ",
        "–ï–∂–æ–≤–æ", "–ï–ª–∞—Å—ã", "–ï–ª–µ–µ–≤–æ", "–ï–ª–µ–º–±–∞–µ–≤–æ", "–ï–º–µ–ª–µ–≤–æ", "–ï–º–µ—à–µ–≤–æ", "–ó–∞—à–∏–∂–µ–º—å–µ",
        "–ó–≤–µ–Ω–∏–≥–æ–≤–æ", "–ó–µ–ª–µ–Ω–æ–≥–æ—Ä—Å–∫", "–ó–Ω–∞–º–µ–Ω—Å–∫–∏–π", "–ò–∑–∏-–ö—É–≥—É–Ω—É—Ä", "–ò–∑–∏-–®—É—Ä–≥–∞",
        "–ò–ª—å–ø–∞–Ω—É—Ä", "–ò—Ä–Ω—É—Ä", "–ò—Å–º–µ–Ω—Ü—ã", "–ò—à—Ç—ã–º–±–∞–ª", "–ô–æ—à–∫–∞—Ä-–û–ª–∞", "–ö–∞–∑–∞–Ω—Å–∫–æ–µ",
        "–ö–∞–ª–µ–µ–≤–æ", "–ö–∞—Ä–∞–π", "–ö–∞—Ä—Ç—É–∫–æ–≤–æ", "–ö–µ–ª—å–º–∞–∫—Å–æ–ª–∞", "–ö–µ—Ä–µ–±–µ–ª—è–∫", "–ö–∏–ª–µ–º–∞—Ä—ã",
        "–ö–∏—á–∏–µ—Ä", "–ö–ª–µ–Ω–æ–≤–∞—è –ì–æ—Ä–∞", "–ö–æ–∑–∏–∫–æ–≤–æ", "–ö–æ–∑—å–º–æ–¥–µ–º—å—è–Ω—Å–∫", "–ö–æ–∫—à–∞–π—Å–∫",
        "–ö–æ–∫—à–∞–º–∞—Ä—ã", "–ö–æ—Ä–∫–∞—Ç–æ–≤–æ", "–ö–æ—Å–æ–ª–∞–ø–æ–≤–æ", "–ö—Ä–∞—Å–Ω–æ–≥–æ—Ä—Å–∫–∏–π", "–ö—Ä–∞—Å–Ω–æ–æ–∫—Ç—è–±—Ä—å—Å–∫–∏–π",
        "–ö—Ä–∞—Å–Ω—ã–π –ú–æ—Å—Ç", "–ö—Ä–∞—Å–Ω—ã–π –°—Ç–µ–∫–ª–æ–≤–∞—Ä", "–ö—Ä–∞—Å–Ω—ã–π –Ø—Ä", "–ö—Ä—É–≥–ª–æ–≤–æ", "–ö—Ä—É–ø–∏–Ω–æ",
        "–ö—É–∞–Ω–ø–∞–º–∞—à", "–ö—É–∂–µ–Ω–µ—Ä", "–ö—É–∂–º–∞—Ä–∞", "–ö—É–∑–Ω–µ—Ü–æ–≤–æ", "–ö—É–∑–Ω–µ—Ü—ã", "–ö—É–∑—å–º–∏–Ω–æ",
        "–ö—É–∫–º–∞—Ä—å", "–ö—É–∫–Ω—É—Ä", "–ö—É–ª–∞–∫–æ–≤–æ", "–ö—É–ª—å–±–∞—à", "–ö—É–º—å—è", "–ö—É—Ä–∞–∫–∏–Ω–æ",
        "–ö—É—á–∫–æ-–ü–∞–º–∞—à", "–ö—É—è—Ä", "–õ–∞–∂—ä—è–ª", "–õ–µ–Ω–∏–Ω—Å–∫–∏–π", "–õ–∏–ø—à–∞", "–õ–æ—Å–∫—É—Ç–æ–≤–æ",
        "–õ—É–∂–±–µ–ª—è–∫", "–õ—é–ª—å–ø–∞–Ω—ã", "–ú–∞–π—Å–∫–∏–π", "–ú–∞–∫–∞—Ä–∫–∏–Ω–æ", "–ú–∞–ª–∞—è –¢—É—Ä—à–∞", "–ú–∞–Ω—ã–ª–æ–≤–æ",
        "–ú–∞—Ä–∏-–ë–∏–ª—è–º–æ—Ä", "–ú–∞—Ä–∏–µ—Ü", "–ú–∞—Ä–∏-–ö—É–ø—Ç–∞", "–ú–∞—Ä–∏—Å–æ–ª–∞", "–ú–∞—Ä–∏-–¢—É—Ä–µ–∫",
        "–ú–∞—Ä–∫–µ–ª–æ–≤–æ", "–ú–∞—Ä–∫–æ–≤–æ", "–ú–∞—Ä—å–∏–Ω–æ", "–ú–∞—Å–∫–∞–Ω—É—Ä", "–ú–µ–¥–≤–µ–¥–µ–≤–æ", "–ú–∏–∫—Ä—è–∫–æ–≤–æ",
        "–ú–∏—Ö–∞–π–ª–æ–≤–∫–∞", "–ú–æ—Ä–∫–∏", "–ú–æ—Ä–∫–∏—è–ª—ã", "–ú–æ—á–∞–ª–∏—â–µ", "–ú—É–º–∞—Ä–∏—Ö–∞", "–ú—É—Å—Ç–∞–µ–≤–æ",
        "–ù–∞—Ä—Ç–∞—Å", "–ù–µ–∂–Ω—É—Ä", "–ù–µ–∂–Ω—É—Ä—Å–∫–∏–π", "–ù–∏–∂–Ω–∏–π –†—É—à–µ–Ω–µ—Ä", "–ù–æ–≤–∞—è –°–ª–æ–±–æ–¥–∞",
        "–ù–æ–≤–æ–ø–∞–≤–ª–æ–≤—Å–∫–∏–π", "–ù–æ–≤—ã–µ –ü–∞—Ä–∞—Ç—ã", "–ù–æ–≤—ã–π", "–ù–æ–≤—ã–π –¢–æ—Ä—ä—è–ª", "–ù—É–∂—å—è–ª—ã",
        "–ù—É—Ä–º–∞", "–û–∑–µ—Ä–∫–∏", "–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π", "–û–ª–æ—Ä—ã", "–û—Ä—à–∞", "–û—Ä—à–∞–Ω–∫–∞", "–û—Å–∏–ø—Å–æ–ª–∞",
        "–û—Ç–∞—Ä—ã", "–û—à–∫–∞–Ω–µ—Ä", "–ü–∞–π–≥—É—Å–æ–≤–æ", "–ü–∞—Ä–∞–Ω—å–≥–∞", "–ü–µ–∫—Ç—É–±–∞–µ–≤–æ", "–ü–µ–º–±–∞",
        "–ü–µ—Ä—Ç–Ω—É—Ä—ã", "–ü–µ—Ä—Ç—ã–ª–≥–∞", "–ü–µ—Ç—Ä–æ–≤—Å–∫–æ–µ", "–ü–µ—Ç—å—è–ª—ã", "–ü–∏–∂–º–∞", "–ü–æ–∫—Ä–æ–≤—Å–∫–æ–µ",
        "–ü–æ–ª–µ–≤–∞—è", "–ü–æ–º–∞—Ä—ã", "–ü–æ—Ä—Ç—è–Ω—É—Ä", "–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π", "–†–æ–Ω–≥–∞", "–†—É–∂–±–µ–ª—è–∫",
        "–†—É—Å—Å–∫–∞—è –õ—è–∂–º–∞—Ä—å", "–†—É—Å—Å–∫–∏–µ –®–æ–∏", "–†—É—Å—Å–∫–∏–π –ö—É–∫–º–æ—Ä", "–†—É—ç–º", "–°–∞–ª—Ç–∞–∫—ä—è–ª",
        "–°–∞—Ä–¥–∞—è–ª", "–°–µ–±–µ—É—Å–∞–¥", "–°–µ–º–µ–Ω–æ–≤–∫–∞", "–°–µ–º–∏—Å–æ–ª–∞", "–°–µ–Ω–¥–∞", "–°–µ–Ω—å–∫–∏–Ω–æ",
        "–°–µ—Ä–Ω—É—Ä", "–°–∏–¥–µ–ª—å–Ω–∏–∫–æ–≤–æ", "–°–∏–ª–∏–∫–∞—Ç–Ω—ã–π", "–°–æ–≤–µ—Ç—Å–∫–∏–π", "–°–æ–ª–Ω–µ—á–Ω—ã–π", "–°–æ—Ç–Ω—É—Ä",
        "–°—Ä–µ–¥–Ω–∏–π –ö–∞–¥–∞–º", "–°—Ç–∞—Ä–æ–µ –ö—Ä–µ—â–µ–Ω–æ", "–°—Ç–∞—Ä—ã–π –¢–æ—Ä—ä—è–ª", "–°—É—Å–ª–æ–Ω–≥–µ—Ä",
        "–°—É—Ö–æ–¥–æ–ª", "–°—ã—Å–æ–µ–≤–æ", "–¢–∞–±–∞—à–∏–Ω–æ", "–¢–∞—Ç –ö–∏—Ç–Ω—è", "–¢–æ–∫—Ç–∞–π–±–µ–ª—è–∫", "–¢–æ–∫—Ç–∞—Ä—Å–æ–ª–∞",
        "–¢—Ä–∏ –†—É—Ç–∫–∏", "–¢—Ä–æ–∏—Ü–∫–∏–π –ü–æ—Å–∞–¥", "–¢—É–º—å—é–º—É—á–∞—à", "–¢—ã–≥—ã–¥–µ –ú–æ—Ä–∫–æ", "–£–ø—à–∞",
        "–£—á–µ–π–∫–∏–Ω–æ", "–•–ª–µ–±–Ω–∏–∫–æ–≤–æ", "–¶–∏–±–∏–∫–Ω—É—Ä", "–ß–∞—Å–æ–≤–µ–Ω–Ω–∞—è", "–ß–µ–∫–µ–µ–≤–æ", "–ß–µ—Ä–Ω–æ–µ –û–∑–µ—Ä–æ",
        "–ß–∏—Ä–∫–∏", "–ß–∫–∞—Ä–∏–Ω–æ", "–ß–æ–±—ã–∫–æ–≤–æ", "–ß–æ–¥—Ä–∞—è–ª", "–®–µ–ª–∞–Ω–≥–µ—Ä", "–®–µ—Ä–µ–≥–∞–Ω–æ–≤–æ",
        "–®–∏–º—à—É—Ä–≥–∞", "–®–∏–Ω–¥—ã—Ä—å—è–ª—ã", "–®–∏–Ω—å—à–∞", "–®–æ–π–±—É–ª–∞–∫", "–®–æ–π-–®—É–¥—É–º–∞—Ä—å", "–®–æ—Ä–¥—É—Ä",
        "–®–æ—Ä—É–Ω—å–∂–∞", "–®—É–∞—Ä—Å–æ–ª–∞", "–®—É–ª–∫–∞", "–®—É—Ä–∞", "–≠–º–µ–∫–æ–≤–æ", "–≠—à–ø–æ–ª–¥–∏–Ω–æ",
        "–Æ–±–∏–ª–µ–π–Ω—ã–π", "–Æ–∫—Å–∞—Ä—ã", "–Æ–ª–µ–¥—É—Ä", "–Æ—Ä–¥—É—Ä", "–Æ—Ä–∏–Ω–æ", "–Æ—Ä–∫–∏–Ω–æ", "–Ø–ª—å—á–∏–∫",
        "–Ø—à—Ç—É–≥–∞"
    ]
    
    print(f"üìã –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤ –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è: {len(cities_list)}\n")
    
    async with AsyncSessionLocal() as db:
        # –ù–∞—Ö–æ–¥–∏–º —Ä–µ–≥–∏–æ–Ω
        region_result = await db.execute(
            select(Region).where(Region.name == "–ú–∞—Ä–∏–π –≠–ª")
        )
        region = region_result.scalar_one_or_none()
        
        if not region:
            print("‚ùå –†–µ–≥–∏–æ–Ω '–ú–∞—Ä–∏–π –≠–ª' –Ω–µ –Ω–∞–π–¥–µ–Ω")
            return
        
        print(f"‚úÖ –ù–∞–π–¥–µ–Ω —Ä–µ–≥–∏–æ–Ω: {region.name} (ID: {region.id})\n")
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –≥–æ—Ä–æ–¥–∞
        existing_result = await db.execute(
            select(City.name).where(City.region_id == region.id)
        )
        existing_names = {city[0].lower().strip() for city in existing_result.all()}
        print(f"üìä –£–∂–µ –µ—Å—Ç—å –≤ –ë–î: {len(existing_names)} –≥–æ—Ä–æ–¥–æ–≤\n")
        
        # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—ã–µ
        added_count = 0
        skipped_count = 0
        
        for city_name in cities_list:
            city_key = city_name.lower().strip()
            
            if city_key in existing_names:
                skipped_count += 1
                continue
            
            new_city = City(
                region_id=region.id,
                federal_district_id=region.federal_district_id,
                country_id=region.country_id,
                name=city_name,
                population=0,
                is_million_city=False,
                is_regional_center=False,
                is_active=True,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            db.add(new_city)
            added_count += 1
            
            # –î–æ–±–∞–≤–ª—è–µ–º –≤ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —á—Ç–æ–±—ã –Ω–µ –±—ã–ª–æ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ —ç—Ç–æ–º —Ü–∏–∫–ª–µ
            existing_names.add(city_key)
        
        await db.commit()
        
        print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö –≥–æ—Ä–æ–¥–æ–≤: {added_count}")
        print(f"‚è≠Ô∏è  –ü—Ä–æ–ø—É—â–µ–Ω–æ (—É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç): {skipped_count}")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = await db.execute(
            select(City).where(City.region_id == region.id)
        )
        total_cities = result.scalars().all()
        
        print(f"\nüéâ –í—Å–µ–≥–æ –≥–æ—Ä–æ–¥–æ–≤ –≤ –ú–∞—Ä–∏–π –≠–ª: {len(total_cities)}")
        print("\n–ü—Ä–∏–º–µ—Ä—ã –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã—Ö –≥–æ—Ä–æ–¥–æ–≤:")
        for city in sorted(total_cities, key=lambda x: x.name)[:20]:
            print(f"  - {city.name}")


if __name__ == "__main__":
    asyncio.run(add_mari_cities_only())

