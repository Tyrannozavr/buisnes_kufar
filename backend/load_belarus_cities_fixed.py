#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≥–æ—Ä–æ–¥–æ–≤ –ë–µ–ª–∞—Ä—É—Å–∏
"""

import asyncio
import sys
from pathlib import Path
from datetime import datetime

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent))

from app.db.base import AsyncSessionLocal
from app.api.common.models.region import Region
from app.api.common.models.city import City
from sqlalchemy import text


async def add_belarus_regions():
    """–î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ë–µ–ª–∞—Ä—É—Å–∏"""
    print("üó∫Ô∏è –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω—ã –ë–µ–ª–∞—Ä—É—Å–∏...")
    
    belarus_regions = [
        (86, 0, 3, '–ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'MINSK'),
        (87, 0, 3, '–ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'GOMEL'),
        (88, 0, 3, '–ú–æ–≥–∏–ª—ë–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'MOGILEV'),
        (89, 0, 3, '–í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'VITEBSK'),
        (90, 0, 3, '–ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'GRODNO'),
        (91, 0, 3, '–ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 'BREST'),
    ]
    
    async with AsyncSessionLocal() as db:
        now = datetime.utcnow()
        for region_id, federal_district_id, country_id, name, code in belarus_regions:
            region = Region(
                id=region_id,
                federal_district_id=federal_district_id if federal_district_id > 0 else None,
                country_id=country_id,
                name=name,
                code=code,
                is_active=True,
                created_at=now,
                updated_at=now
            )
            db.add(region)
        await db.commit()
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(belarus_regions)} —Ä–µ–≥–∏–æ–Ω–æ–≤ –ë–µ–ª–∞—Ä—É—Å–∏")


async def add_belarus_cities():
    """–î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –ë–µ–ª–∞—Ä—É—Å–∏"""
    print("üèôÔ∏è –î–æ–±–∞–≤–ª—è–µ–º –≥–æ—Ä–æ–¥–∞ –ë–µ–ª–∞—Ä—É—Å–∏...")
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –ë–µ–ª–∞—Ä—É—Å–∏ —Å –Ω–∞—Å–µ–ª–µ–Ω–∏–µ–º –∏ —Ä–µ–≥–∏–æ–Ω–∞–º–∏
    belarus_cities = [
        # –ú–∏–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (86)
        (135, 0, 86, 3, '–ú–∏–Ω—Å–∫', 2000000, True, True),
        (136, 0, 86, 3, '–ë–æ—Ä–∏—Å–æ–≤', 150000, False, False),
        (137, 0, 86, 3, '–°–æ–ª–∏–≥–æ—Ä—Å–∫', 150000, False, False),
        (138, 0, 86, 3, '–ú–æ–ª–æ–¥–µ—á–Ω–æ', 100000, False, False),
        (139, 0, 86, 3, '–ñ–æ–¥–∏–Ω–æ', 70000, False, False),
        (140, 0, 86, 3, '–°–ª—É—Ü–∫', 60000, False, False),
        (141, 0, 86, 3, '–í–∏–ª–µ–π–∫–∞', 30000, False, False),
        (142, 0, 86, 3, '–î–∑–µ—Ä–∂–∏–Ω—Å–∫', 30000, False, False),
        (143, 0, 86, 3, '–ú–∞—Ä—å–∏–Ω–∞ –ì–æ—Ä–∫–∞', 25000, False, False),
        (144, 0, 86, 3, '–°—Ç–æ–ª–±—Ü—ã', 20000, False, False),
        (145, 0, 86, 3, '–ù–µ—Å–≤–∏–∂', 15000, False, False),
        (146, 0, 86, 3, '–ö–ª–µ—Ü–∫', 12000, False, False),
        (147, 0, 86, 3, '–õ—é–±–∞–Ω—å', 10000, False, False),
        (148, 0, 86, 3, '–°—Ç–∞—Ä—ã–µ –î–æ—Ä–æ–≥–∏', 8000, False, False),
        (149, 0, 86, 3, '–ö–æ–ø—ã–ª—å', 7000, False, False),
        (150, 0, 86, 3, '–£–∑–¥–∞', 6000, False, False),
        (151, 0, 86, 3, '–ß–µ—Ä–≤–µ–Ω—å', 5000, False, False),
        (152, 0, 86, 3, '–°–º–æ–ª–µ–≤–∏—á–∏', 5000, False, False),
        (153, 0, 86, 3, '–õ–æ–≥–æ–π—Å–∫', 4000, False, False),
        (154, 0, 86, 3, '–í–æ–ª–æ–∂–∏–Ω', 4000, False, False),
        
        # –ì–æ–º–µ–ª—å—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (87)
        (155, 0, 87, 3, '–ì–æ–º–µ–ª—å', 500000, False, True),
        (156, 0, 87, 3, '–ú–æ–∑—ã—Ä—å', 150000, False, False),
        (157, 0, 87, 3, '–ñ–ª–æ–±–∏–Ω', 80000, False, False),
        (158, 0, 87, 3, '–°–≤–µ—Ç–ª–æ–≥–æ—Ä—Å–∫', 70000, False, False),
        (159, 0, 87, 3, '–†–µ—á–∏—Ü–∞', 60000, False, False),
        (160, 0, 87, 3, '–ö–∞–ª–∏–Ω–∫–æ–≤–∏—á–∏', 40000, False, False),
        (161, 0, 87, 3, '–†–æ–≥–∞—á—ë–≤', 35000, False, False),
        (162, 0, 87, 3, '–î–æ–±—Ä—É—à', 20000, False, False),
        (163, 0, 87, 3, '–í–µ—Ç–∫–∞', 15000, False, False),
        (164, 0, 87, 3, '–ß–µ—á–µ—Ä—Å–∫', 10000, False, False),
        (165, 0, 87, 3, '–ë—É–¥–∞-–ö–æ—à–µ–ª—ë–≤–æ', 8000, False, False),
        (166, 0, 87, 3, '–•–æ–π–Ω–∏–∫–∏', 7000, False, False),
        (167, 0, 87, 3, '–ù–∞—Ä–æ–≤–ª—è', 5000, False, False),
        (168, 0, 87, 3, '–ï–ª—å—Å–∫', 5000, False, False),
        (169, 0, 87, 3, '–õ–µ–ª—å—á–∏—Ü—ã', 4000, False, False),
        (170, 0, 87, 3, '–ü–µ—Ç—Ä–∏–∫–æ–≤', 4000, False, False),
        (171, 0, 87, 3, '–û–∫—Ç—è–±—Ä—å—Å–∫–∏–π', 3000, False, False),
        (172, 0, 87, 3, '–ö–æ—Ä–º–∞', 3000, False, False),
        (173, 0, 87, 3, '–ë—Ä–∞–≥–∏–Ω', 2000, False, False),
        (174, 0, 87, 3, '–õ–æ–µ–≤', 2000, False, False),
        
        # –ú–æ–≥–∏–ª—ë–≤—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (88)
        (175, 0, 88, 3, '–ú–æ–≥–∏–ª—ë–≤', 400000, False, True),
        (176, 0, 88, 3, '–ë–æ–±—Ä—É–π—Å–∫', 200000, False, False),
        (177, 0, 88, 3, '–û—Ä—à–∞', 150000, False, False),
        (178, 0, 88, 3, '–ì–æ—Ä–∫–∏', 40000, False, False),
        (179, 0, 88, 3, '–ö—Ä–∏—á–µ–≤', 30000, False, False),
        (180, 0, 88, 3, '–û—Å–∏–ø–æ–≤–∏—á–∏', 30000, False, False),
        (181, 0, 88, 3, '–ö–ª–∏–º–æ–≤–∏—á–∏', 20000, False, False),
        (182, 0, 88, 3, '–®–∫–ª–æ–≤', 20000, False, False),
        (183, 0, 88, 3, '–ö–æ—Å—Ç—é–∫–æ–≤–∏—á–∏', 15000, False, False),
        (184, 0, 88, 3, '–ß–∞—É—Å—ã', 15000, False, False),
        (185, 0, 88, 3, '–ú—Å—Ç–∏—Å–ª–∞–≤–ª—å', 10000, False, False),
        (186, 0, 88, 3, '–ß–µ—Ä–∏–∫–æ–≤', 10000, False, False),
        (187, 0, 88, 3, '–°–ª–∞–≤–≥–æ—Ä–æ–¥', 8000, False, False),
        (188, 0, 88, 3, '–ö—Ä–∞—Å–Ω–æ–ø–æ–ª—å–µ', 6000, False, False),
        (189, 0, 88, 3, '–•–æ—Ç–∏–º—Å–∫', 5000, False, False),
        (190, 0, 88, 3, '–ö—Ä—É–≥–ª–æ–µ', 4000, False, False),
        (191, 0, 88, 3, '–ë–µ–ª—ã–Ω–∏—á–∏', 4000, False, False),
        (192, 0, 88, 3, '–î—Ä–∏–±–∏–Ω', 3000, False, False),
        (193, 0, 88, 3, '–ì–ª—É—Å–∫', 3000, False, False),
        (194, 0, 88, 3, '–ö–∏—Ä–æ–≤—Å–∫', 2000, False, False),
        
        # –í–∏—Ç–µ–±—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (89)
        (195, 0, 89, 3, '–í–∏—Ç–µ–±—Å–∫', 400000, False, True),
        (196, 0, 89, 3, '–ù–æ–≤–æ–ø–æ–ª–æ—Ü–∫', 100000, False, False),
        (197, 0, 89, 3, '–ü–æ–ª–æ—Ü–∫', 80000, False, False),
        (198, 0, 89, 3, '–õ–µ–ø–µ–ª—å', 20000, False, False),
        (199, 0, 89, 3, '–ì–ª—É–±–æ–∫–æ–µ', 20000, False, False),
        (200, 0, 89, 3, '–ü–æ—Å—Ç–∞–≤—ã', 20000, False, False),
        (201, 0, 89, 3, '–ë—Ä–∞—Å–ª–∞–≤', 15000, False, False),
        (202, 0, 89, 3, '–î–æ–∫—à–∏—Ü—ã', 15000, False, False),
        (203, 0, 89, 3, '–î—É–±—Ä–æ–≤–Ω–æ', 10000, False, False),
        (204, 0, 89, 3, '–õ–∏–æ–∑–Ω–æ', 10000, False, False),
        (205, 0, 89, 3, '–ú–∏–æ—Ä—ã', 10000, False, False),
        (206, 0, 89, 3, '–†–æ—Å—Å–æ–Ω—ã', 10000, False, False),
        (207, 0, 89, 3, '–°–µ–Ω–Ω–æ', 10000, False, False),
        (208, 0, 89, 3, '–¢–æ–ª–æ—á–∏–Ω', 10000, False, False),
        (209, 0, 89, 3, '–£—à–∞—á–∏', 8000, False, False),
        (210, 0, 89, 3, '–ß–∞—à–Ω–∏–∫–∏', 8000, False, False),
        (211, 0, 89, 3, '–®–∞—Ä–∫–æ–≤—â–∏–Ω–∞', 6000, False, False),
        (212, 0, 89, 3, '–®—É–º–∏–ª–∏–Ω–æ', 6000, False, False),
        (213, 0, 89, 3, '–í–µ—Ä—Ö–Ω–µ–¥–≤–∏–Ω—Å–∫', 5000, False, False),
        
        # –ì—Ä–æ–¥–Ω–µ–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (90)
        (214, 0, 90, 3, '–ì—Ä–æ–¥–Ω–æ', 400000, False, True),
        (215, 0, 90, 3, '–õ–∏–¥–∞', 100000, False, False),
        (216, 0, 90, 3, '–°–ª–æ–Ω–∏–º', 50000, False, False),
        (217, 0, 90, 3, '–í–æ–ª–∫–æ–≤—ã—Å–∫', 50000, False, False),
        (218, 0, 90, 3, '–°–º–æ—Ä–≥–æ–Ω—å', 40000, False, False),
        (219, 0, 90, 3, '–ù–æ–≤–æ–≥—Ä—É–¥–æ–∫', 30000, False, False),
        (220, 0, 90, 3, '–û—à–º—è–Ω—ã', 20000, False, False),
        (221, 0, 90, 3, '–©—É—á–∏–Ω', 20000, False, False),
        (222, 0, 90, 3, '–ò–≤—å–µ', 15000, False, False),
        (223, 0, 90, 3, '–ö–æ—Ä–µ–ª–∏—á–∏', 15000, False, False),
        (224, 0, 90, 3, '–ú–æ—Å—Ç—ã', 15000, False, False),
        (225, 0, 90, 3, '–ó–µ–ª—å–≤–∞', 10000, False, False),
        (226, 0, 90, 3, '–°–≤–∏—Å–ª–æ—á—å', 10000, False, False),
        (227, 0, 90, 3, '–ë–µ—Ä–µ—Å—Ç–æ–≤–∏—Ü–∞', 8000, False, False),
        (228, 0, 90, 3, '–î—è—Ç–ª–æ–≤–æ', 8000, False, False),
        (229, 0, 90, 3, '–í–æ—Ä–æ–Ω–æ–≤–æ', 6000, False, False),
        (230, 0, 90, 3, '–û—Å—Ç—Ä–æ–≤–µ—Ü', 6000, False, False),
        (231, 0, 90, 3, '–°–∫–∏–¥–µ–ª—å', 5000, False, False),
        (232, 0, 90, 3, '–ë–µ—Ä—ë–∑–æ–≤–∫–∞', 4000, False, False),
        (233, 0, 90, 3, '–õ—é–±—á–∞', 3000, False, False),
        
        # –ë—Ä–µ—Å—Ç—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å (91)
        (234, 0, 91, 3, '–ë—Ä–µ—Å—Ç', 350000, False, True),
        (235, 0, 91, 3, '–ë–∞—Ä–∞–Ω–æ–≤–∏—á–∏', 200000, False, False),
        (236, 0, 91, 3, '–ü–∏–Ω—Å–∫', 150000, False, False),
        (237, 0, 91, 3, '–ö–æ–±—Ä–∏–Ω', 50000, False, False),
        (238, 0, 91, 3, '–ë–µ—Ä—ë–∑–∞', 30000, False, False),
        (239, 0, 91, 3, '–õ—É–Ω–∏–Ω–µ—Ü', 30000, False, False),
        (240, 0, 91, 3, '–ò–≤–∞—Ü–µ–≤–∏—á–∏', 25000, False, False),
        (241, 0, 91, 3, '–ü—Ä—É–∂–∞–Ω—ã', 25000, False, False),
        (242, 0, 91, 3, '–ñ–∞–±–∏–Ω–∫–∞', 20000, False, False),
        (243, 0, 91, 3, '–ú–∏–∫–∞—à–µ–≤–∏—á–∏', 15000, False, False),
        (244, 0, 91, 3, '–°—Ç–æ–ª–∏–Ω', 15000, False, False),
        (245, 0, 91, 3, '–î—Ä–æ–≥–∏—á–∏–Ω', 15000, False, False),
        (246, 0, 91, 3, '–ú–∞–ª–æ—Ä–∏—Ç–∞', 10000, False, False),
        (247, 0, 91, 3, '–ì–∞–Ω—Ü–µ–≤–∏—á–∏', 10000, False, False),
        (248, 0, 91, 3, '–ö–∞–º–µ–Ω–µ—Ü', 10000, False, False),
        (249, 0, 91, 3, '–õ—è—Ö–æ–≤–∏—á–∏', 10000, False, False),
        (250, 0, 91, 3, '–í—ã—Å–æ–∫–æ–µ', 5000, False, False),
        (251, 0, 91, 3, '–ö–æ—Å—Å–æ–≤–æ', 3000, False, False),
        (252, 0, 91, 3, '–¢–µ–ª–µ—Ö–∞–Ω—ã', 2000, False, False),
    ]
    
    async with AsyncSessionLocal() as db:
        now = datetime.utcnow()
        for city_id, federal_district_id, region_id, country_id, name, population, is_million_city, is_regional_center in belarus_cities:
            city = City(
                id=city_id,
                federal_district_id=federal_district_id if federal_district_id > 0 else None,
                region_id=region_id if region_id > 0 else None,
                country_id=country_id,
                name=name,
                population=population,
                is_million_city=is_million_city,
                is_regional_center=is_regional_center,
                is_active=True,
                created_at=now,
                updated_at=now
            )
            db.add(city)
        await db.commit()
    
    print(f"‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–æ {len(belarus_cities)} –≥–æ—Ä–æ–¥–æ–≤ –ë–µ–ª–∞—Ä—É—Å–∏")


async def clear_old_belarus_data():
    """–û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–µ–ª–∞—Ä—É—Å–∏"""
    print("üßπ –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –ë–µ–ª–∞—Ä—É—Å–∏...")
    
    async with AsyncSessionLocal() as db:
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ –≥–æ—Ä–æ–¥–∞ –ë–µ–ª–∞—Ä—É—Å–∏
        await db.execute(text("DELETE FROM cities WHERE country_id = 3"))
        # –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä—ã–µ —Ä–µ–≥–∏–æ–Ω—ã –ë–µ–ª–∞—Ä—É—Å–∏
        await db.execute(text("DELETE FROM regions WHERE country_id = 3"))
        await db.commit()
    
    print("‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")


async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –∑–∞–≥—Ä—É–∑–∫—É –≥–æ—Ä–æ–¥–æ–≤ –ë–µ–ª–∞—Ä—É—Å–∏...")
    
    try:
        await clear_old_belarus_data()
        await add_belarus_regions()
        await add_belarus_cities()
        
        print("\nüéâ –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤ –ë–µ–ª–∞—Ä—É—Å–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        async with AsyncSessionLocal() as db:
            from sqlalchemy import text
            result = await db.execute(text("SELECT COUNT(*) FROM regions WHERE country_id = 3"))
            regions_count = result.scalar()
            result = await db.execute(text("SELECT COUNT(*) FROM cities WHERE country_id = 3"))
            cities_count = result.scalar()
            
            print(f"\nüìä –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
            print(f"   üó∫Ô∏è –†–µ–≥–∏–æ–Ω–æ–≤ –ë–µ–ª–∞—Ä—É—Å–∏: {regions_count}")
            print(f"   üèôÔ∏è –ì–æ—Ä–æ–¥–æ–≤ –ë–µ–ª–∞—Ä—É—Å–∏: {cities_count}")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –≥–æ—Ä–æ–¥–æ–≤ –ë–µ–ª–∞—Ä—É—Å–∏: {e}")
        raise


if __name__ == "__main__":
    asyncio.run(main())
