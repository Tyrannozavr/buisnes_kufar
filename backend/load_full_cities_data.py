#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏ –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
"""

import asyncio
import re
import sys
from pathlib import Path

sys.path.append(str(Path(__file__).parent))

from sqlalchemy import text
from app.db.base import AsyncSessionLocal


def escape_sql_string(value):
    """–≠–∫—Ä–∞–Ω–∏—Ä—É–µ—Ç —Å–ø–µ—Ü–∏–∞–ª—å–Ω—ã–µ —Å–∏–º–≤–æ–ª—ã –≤ SQL —Å—Ç—Ä–æ–∫–∞—Ö"""
    return value.replace("'", "''")


async def load_full_cities_data():
    """–ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–æ–ª–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö –∏–∑ SQL —Ñ–∞–π–ª–∞"""
    print("üöÄ –ó–∞–≥—Ä—É–∑–∫–∞ –ø–æ–ª–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö –æ –≥–æ—Ä–æ–¥–∞—Ö –†–æ—Å—Å–∏–∏...")
    
    sql_file = Path(__file__).parent.parent / "data_cities" / "complete_cities_db_final.sql"
    
    if not sql_file.exists():
        print(f"‚ùå –§–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω: {sql_file}")
        return
    
    with open(sql_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ò–∑–≤–ª–µ–∫–∞–µ–º INSERT INTO statements
    countries_pattern = r"INSERT INTO `countries`[^;]+VALUES\s+([^;]+);"
    federal_districts_pattern = r"INSERT INTO `federal_districts`[^;]+VALUES\s+([^;]+);"
    regions_pattern = r"INSERT INTO `regions`[^;]+VALUES\s+([^;]+);"
    cities_pattern = r"INSERT INTO `cities`[^;]+VALUES\s+([^;]+);"
    
    countries_match = re.search(countries_pattern, content, re.DOTALL)
    federal_districts_match = re.search(federal_districts_pattern, content, re.DOTALL)
    regions_match = re.search(regions_pattern, content, re.DOTALL)
    cities_match = re.search(cities_pattern, content, re.DOTALL)
    
    if not countries_match or not federal_districts_match or not regions_match or not cities_match:
        print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –¥–∞–Ω–Ω—ã–µ –≤ SQL —Ñ–∞–π–ª–µ")
        return
    
    # –ü–∞—Ä—Å–∏–º –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    def parse_insert_data(data_str):
        """–ü–∞—Ä—Å–∏—Ç —Å—Ç—Ä–æ–∫—É INSERT VALUES –≤ —Å–ø–∏—Å–æ–∫ –∫–æ—Ä—Ç–µ–∂–µ–π"""
        records = []
        # –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∑–∞–ø–∏—Å–∏ –º–µ–∂–¥—É —Å–∫–æ–±–∫–∞–º–∏
        for match in re.finditer(r'\(([^)]+)\)', data_str):
            values = match.group(1)
            # –†–∞–∑–¥–µ–ª—è–µ–º –Ω–∞ —á–∞—Å—Ç–∏, —É—á–∏—Ç—ã–≤–∞—è –∫–∞–≤—ã—á–∫–∏
            parts = []
            current = ""
            in_quotes = False
            quote_char = None
            
            for char in values:
                if char in ("'", '"') and not (current and current[-1] == '\\'):
                    if not in_quotes:
                        in_quotes = True
                        quote_char = char
                    elif char == quote_char:
                        in_quotes = False
                        quote_char = None
                elif char == ',' and not in_quotes:
                    parts.append(current.strip())
                    current = ""
                    continue
                
                current += char
            
            if current:
                parts.append(current.strip())
            
            # –û—á–∏—â–∞–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –æ—Ç –∫–∞–≤—ã—á–µ–∫
            cleaned_parts = []
            for part in parts:
                part = part.strip().strip("'\"")
                cleaned_parts.append(part)
            
            if cleaned_parts:
                records.append(cleaned_parts)
        
        return records
    
    countries_data = parse_insert_data(countries_match.group(1))
    federal_districts_data = parse_insert_data(federal_districts_match.group(1))
    regions_data = parse_insert_data(regions_match.group(1))
    cities_data = parse_insert_data(cities_match.group(1))
    
    print(f"üìä –ù–∞–π–¥–µ–Ω–æ –¥–∞–Ω–Ω—ã—Ö:")
    print(f"   ‚Ä¢ –°—Ç—Ä–∞–Ω—ã: {len(countries_data)}")
    print(f"   ‚Ä¢ –§–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞: {len(federal_districts_data)}")
    print(f"   ‚Ä¢ –†–µ–≥–∏–æ–Ω—ã: {len(regions_data)}")
    print(f"   ‚Ä¢ –ì–æ—Ä–æ–¥–∞: {len(cities_data)}")
    
    async with AsyncSessionLocal() as session:
        try:
            # –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ
            print("\nüßπ –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö...")
            await session.execute(text("DELETE FROM cities"))
            await session.execute(text("DELETE FROM regions"))
            await session.execute(text("DELETE FROM federal_districts"))
            await session.execute(text("DELETE FROM countries"))
            await session.commit()
            print("‚úÖ –°—Ç–∞—Ä—ã–µ –¥–∞–Ω–Ω—ã–µ —É–¥–∞–ª–µ–Ω—ã")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Å—Ç—Ä–∞–Ω—ã
            print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ —Å—Ç—Ä–∞–Ω...")
            for data in countries_data:
                if len(data) >= 3:
                    country_id = data[0]
                    name = escape_sql_string(data[1])
                    code = data[2]
                    
                    await session.execute(text(
                        f"INSERT INTO countries (id, name, code, is_active) VALUES ({country_id}, '{name}', '{code}', true)"
                    ))
            await session.commit()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(countries_data)} —Å—Ç—Ä–∞–Ω")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–µ –æ–∫—Ä—É–≥–∞
            print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–≥–æ–≤...")
            # –ú–∞–ø–ø–∏–Ω–≥ –æ–∫—Ä—É–≥–æ–≤ –∫ –∫–æ–¥–∞–º
            district_codes = {
                '–¶–µ–Ω—Ç—Ä–∞–ª—å–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': 'FD1',
                '–°–µ–≤–µ—Ä–æ-–ó–∞–ø–∞–¥–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': 'FD2',
                '–Æ–∂–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': 'FD3',
                '–î–∞–ª—å–Ω–µ–≤–æ—Å—Ç–æ—á–Ω—ã–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': 'FD4',
                '–°–∏–±–∏—Ä—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': 'FD5',
                '–£—Ä–∞–ª—å—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': 'FD6',
                '–ü—Ä–∏–≤–æ–ª–∂—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': 'FD7',
                '–°–µ–≤–µ—Ä–æ-–ö–∞–≤–∫–∞–∑—Å–∫–∏–π —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–π –æ–∫—Ä—É–≥': 'FD8'
            }
            
            for data in federal_districts_data:
                if len(data) >= 3:
                    fd_id = data[0]
                    country_id = data[1]
                    name = escape_sql_string(data[2])
                    code = district_codes.get(name, f'FD{fd_id}')
                    
                    await session.execute(text(
                        f"INSERT INTO federal_districts (id, country_id, name, code, is_active) VALUES ({fd_id}, {country_id}, '{name}', '{code}', true)"
                    ))
            await session.commit()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(federal_districts_data)} —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã—Ö –æ–∫—Ä—É–≥–æ–≤")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–≥–∏–æ–Ω—ã
            print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ —Ä–µ–≥–∏–æ–Ω–æ–≤...")
            for data in regions_data:
                if len(data) >= 5:
                    region_id = data[0]
                    district_id = data[1]
                    country_id = data[2]
                    name = escape_sql_string(data[3])
                    region_type = data[4] if len(data) > 4 else ''
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–¥ —Ä–µ–≥–∏–æ–Ω–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–∞–∑–≤–∞–Ω–∏—è
                    code = name[:20].upper().replace(' ', '').replace('.', '')
                    
                    await session.execute(text(
                        f"INSERT INTO regions (id, federal_district_id, country_id, name, code, is_active) VALUES ({region_id}, {district_id}, {country_id}, '{name}', '{code}', true)"
                    ))
            await session.commit()
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(regions_data)} —Ä–µ–≥–∏–æ–Ω–æ–≤")
            
            # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥–∞
            print("\nüì• –ó–∞–≥—Ä—É–∑–∫–∞ –≥–æ—Ä–æ–¥–æ–≤...")
            batch_size = 100
            for i in range(0, len(cities_data), batch_size):
                batch = cities_data[i:i+batch_size]
                
                for data in batch:
                    if len(data) >= 7:
                        city_id = data[0]
                        region_id = data[1]
                        district_id = data[2]
                        country_id = data[3]
                        name = escape_sql_string(data[4])
                        population = int(data[5]) if data[5] else 0
                        is_regional_center = data[6] == '1' or data[6] == 1
                        is_million_city = population >= 1000000
                        
                        await session.execute(text(
                            f"INSERT INTO cities (id, region_id, federal_district_id, country_id, name, population, is_million_city, is_regional_center, is_active) VALUES ({city_id}, {region_id}, {district_id}, {country_id}, '{name}', {population}, {is_million_city}, {is_regional_center}, true)"
                        ))
                
                if (i // batch_size + 1) % 10 == 0:
                    print(f"   –ó–∞–≥—Ä—É–∂–µ–Ω–æ {i + len(batch)} –≥–æ—Ä–æ–¥–æ–≤...")
                
                await session.commit()
            
            print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(cities_data)} –≥–æ—Ä–æ–¥–æ–≤")
            print("\nüéâ –î–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∑–∞–≥—Ä—É–∂–µ–Ω—ã!")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –¥–∞–Ω–Ω—ã—Ö: {e}")
            import traceback
            traceback.print_exc()
            await session.rollback()
            raise


if __name__ == "__main__":
    asyncio.run(load_full_cities_data())
