import asyncio
import asyncpg
import random
import json
from datetime import datetime
from typing import List, Dict, Any

DATABASE_URL = 'postgresql://postgres:postgres@db/postgres'

class RealisticDataPopulator:
    def __init__(self):
        self.connection = None
        self.cities = []
        self.regions = []
        self.federal_districts = []
        
    async def connect(self):
        self.connection = await asyncpg.connect(DATABASE_URL)
        print("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ")
        
    async def disconnect(self):
        if self.connection:
            await self.connection.close()
            print("‚úÖ –°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ")
    
    async def load_cities_data(self):
        """–ó–∞–≥—Ä—É–∂–∞–µ–º —Ä–µ–∞–ª—å–Ω—ã–µ –≥–æ—Ä–æ–¥–∞ –∏–∑ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
        print("üîÑ –ó–∞–≥—Ä—É–∂–∞–µ–º –¥–∞–Ω–Ω—ã–µ –æ –≥–æ—Ä–æ–¥–∞—Ö...")
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –≥–æ—Ä–æ–¥–∞ —Å —Ä–µ–≥–∏–æ–Ω–∞–º–∏ –∏ —Ñ–µ–¥–µ—Ä–∞–ª—å–Ω—ã–º–∏ –æ–∫—Ä—É–≥–∞–º–∏
        query = """
            SELECT 
                c.id as city_id,
                c.name as city_name,
                c.population,
                c.is_million_city,
                c.is_regional_center,
                r.id as region_id,
                r.name as region_name,
                fd.id as federal_district_id,
                fd.name as federal_district_name
            FROM cities c
            JOIN regions r ON c.region_id = r.id
            JOIN federal_districts fd ON r.federal_district_id = fd.id
            ORDER BY c.population DESC
        """
        
        result = await self.connection.fetch(query)
        self.cities = [dict(row) for row in result]
        
        print(f"‚úÖ –ó–∞–≥—Ä—É–∂–µ–Ω–æ {len(self.cities)} –≥–æ—Ä–æ–¥–æ–≤")
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ø-10 –≥–æ—Ä–æ–¥–æ–≤
        print("\nüèôÔ∏è –¢–æ–ø-10 –≥–æ—Ä–æ–¥–æ–≤ –ø–æ –Ω–∞—Å–µ–ª–µ–Ω–∏—é:")
        for i, city in enumerate(self.cities[:10], 1):
            print(f"{i:2d}. {city['city_name']} ({city['population']:,} —á–µ–ª.) - {city['region_name']}")
    
    async def clear_existing_data(self):
        """–û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ"""
        print("üîÑ –û—á–∏—â–∞–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
        
        # –£–¥–∞–ª—è–µ–º –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–º –ø–æ—Ä—è–¥–∫–µ (—Å–Ω–∞—á–∞–ª–∞ –∑–∞–≤–∏—Å–∏–º—ã–µ —Ç–∞–±–ª–∏—Ü—ã)
        await self.connection.execute("DELETE FROM announcements WHERE company_id IN (SELECT id FROM companies WHERE name LIKE '%–¢–µ—Å—Ç%' OR name LIKE '%–û–û–û%')")
        await self.connection.execute("DELETE FROM products WHERE company_id IN (SELECT id FROM companies WHERE name LIKE '%–¢–µ—Å—Ç%' OR name LIKE '%–û–û–û%')")
        await self.connection.execute("DELETE FROM companies WHERE name LIKE '%–¢–µ—Å—Ç%' OR name LIKE '%–û–û–û%'")
        
        print("‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ –æ—á–∏—â–µ–Ω—ã")
    
    async def create_companies(self, count: int = 100):
        """–°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏ –≤ —Ä–µ–∞–ª—å–Ω—ã—Ö –≥–æ—Ä–æ–¥–∞—Ö"""
        print(f"üîÑ –°–æ–∑–¥–∞–µ–º {count} –∫–æ–º–ø–∞–Ω–∏–π...")
        
        company_types = [
            "–û–û–û", "–ò–ü", "–ó–ê–û", "–û–ê–û", "–ê–û", "–ü–ê–û", "–¢–û–û", "–ß–ü"
        ]
        
        business_activities = [
            "IT-—É—Å–ª—É–≥–∏ –∏ —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥", "–û–±—Ä–∞–∑–æ–≤–∞–Ω–∏–µ", "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
            "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "–õ–æ–≥–∏—Å—Ç–∏–∫–∞ –∏ –¥–æ—Å—Ç–∞–≤–∫–∞", "–†–µ–º–æ–Ω—Ç –∏ –æ–±—Å–ª—É–∂–∏–≤–∞–Ω–∏–µ",
            "–î–∏–∑–∞–π–Ω –∏ –º–∞—Ä–∫–µ—Ç–∏–Ω–≥", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å—Å—Ç–≤–æ",
            "–ö—Ä–∞—Å–æ—Ç–∞ –∏ –∑–¥–æ—Ä–æ–≤—å–µ", "–¢—É—Ä–∏–∑–º –∏ –æ—Ç–¥—ã—Ö", "–§–∏–Ω–∞–Ω—Å–æ–≤—ã–µ —É—Å–ª—É–≥–∏",
            "–ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–æ", "–¢–æ—Ä–≥–æ–≤–ª—è", "–û–±—â–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –ø–∏—Ç–∞–Ω–∏–µ", "–ù–µ–¥–≤–∏–∂–∏–º–æ—Å—Ç—å",
            "–ê–≤—Ç–æ–º–æ–±–∏–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏", "–°–µ–ª—å—Å–∫–æ–µ —Ö–æ–∑—è–π—Å—Ç–≤–æ", "–≠–Ω–µ—Ä–≥–µ—Ç–∏–∫–∞"
        ]
        
        trade_activities = ["BUYER", "SELLER", "BOTH"]
        business_types = ["GOODS", "SERVICES", "BOTH"]
        
        companies_created = 0
        
        for i in range(count):
            try:
                # –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –≥–æ—Ä–æ–¥
                city = random.choice(self.cities)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –Ω–∞–∑–≤–∞–Ω–∏–µ –∫–æ–º–ø–∞–Ω–∏–∏
                company_type = random.choice(company_types)
                activity = random.choice(business_activities)
                company_name = f"{company_type} \"{activity}\""
                
                # –°–æ–∑–¥–∞–µ–º slug
                slug = f"company-{companies_created + 1}"
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ —Ä–µ–∫–≤–∏–∑–∏—Ç—ã
                inn = f"{random.randint(1000000000, 9999999999)}"
                ogrn = f"{random.randint(1000000000000, 9999999999999)}"
                kpp = f"{random.randint(100000000, 999999999)}"
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å –ò–ù–ù
                existing_inn = await self.connection.fetchval("SELECT inn FROM companies WHERE inn = $1", inn)
                if existing_inn:
                    inn = f"{random.randint(1000000000, 9999999999)}"
                
                # –í—Å—Ç–∞–≤–ª—è–µ–º –∫–æ–º–ø–∞–Ω–∏—é
                company_id = await self.connection.fetchval("""
                    INSERT INTO companies (
                        name, slug, type, trade_activity, business_type, activity_type, description,
                        country, federal_district, region, city,
                        country_id, federal_district_id, region_id, city_id,
                        full_name, inn, ogrn, kpp, registration_date, legal_address, production_address,
                        phone, email, website, total_views, monthly_views, total_purchases,
                        user_id, is_active, created_at, updated_at
                    ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, $13, $14, $15, $16, $17, $18, $19, $20, $21, $22, $23, $24, $25, $26, $27, $28, $29, $30, NOW(), NOW())
                    RETURNING id
                """,
                    company_name,
                    slug,
                    company_type,
                    random.choice(trade_activities),
                    random.choice(business_types),
                    activity,
                    f"–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–µ —É—Å–ª—É–≥–∏ –≤ —Å—Ñ–µ—Ä–µ {activity.lower()}. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω–æ–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ —Ä–∞–±–æ—Ç —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞.",
                    "–†–æ—Å—Å–∏–π—Å–∫–∞—è –§–µ–¥–µ—Ä–∞—Ü–∏—è",
                    city['federal_district_name'],
                    city['region_name'],
                    city['city_name'],
                    1,  # country_id –¥–ª—è –†–æ—Å—Å–∏–∏
                    city['federal_district_id'],
                    city['region_id'],
                    city['city_id'],
                    f"{company_type} \"{activity}\"",
                    inn,
                    ogrn,
                    kpp,
                    datetime.now(),
                    f"{city['city_name']}, —É–ª. –ü—Ä–∏–º–µ—Ä–Ω–∞—è, –¥. {random.randint(1, 100)}",
                    f"{city['city_name']}, —É–ª. –ü—Ä–æ–∏–∑–≤–æ–¥—Å—Ç–≤–µ–Ω–Ω–∞—è, –¥. {random.randint(1, 100)}",
                    f"+7 ({random.randint(900, 999)}) {random.randint(100, 999)}-{random.randint(10, 99)}-{random.randint(10, 99)}",
                    f"info@{slug}.ru",
                    f"https://{slug}.ru",
                    0, 0, 0, 1, True
                )
                
                companies_created += 1
                
                if companies_created % 10 == 0:
                    print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {companies_created} –∫–æ–º–ø–∞–Ω–∏–π...")
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∫–æ–º–ø–∞–Ω–∏–∏ {i+1}: {e}")
                continue
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {companies_created} –∫–æ–º–ø–∞–Ω–∏–π")
        return companies_created
    
    async def create_products(self, companies_count: int, products_per_company: int = 3):
        """–°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–π"""
        print(f"üîÑ –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –∏ —É—Å–ª—É–≥–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–º–ø–∞–Ω–∏–∏
        companies = await self.connection.fetch("SELECT id, name, activity_type FROM companies ORDER BY id")
        
        goods_categories = [
            "–≠–ª–µ–∫—Ç—Ä–æ–Ω–∏–∫–∞", "–û–¥–µ–∂–¥–∞", "–ú–µ–±–µ–ª—å", "–ü—Ä–æ–¥—É–∫—Ç—ã –ø–∏—Ç–∞–Ω–∏—è", "–ö–Ω–∏–≥–∏",
            "–°–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Ç–æ–≤–∞—Ä—ã", "–ê–≤—Ç–æ–º–æ–±–∏–ª–∏", "–°—Ç—Ä–æ–∏—Ç–µ–ª—å–Ω—ã–µ –º–∞—Ç–µ—Ä–∏–∞–ª—ã", "–ò–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç—ã",
            "–ö–æ—Å–º–µ—Ç–∏–∫–∞", "–ò–≥—Ä—É—à–∫–∏", "–ë—ã—Ç–æ–≤–∞—è —Ç–µ—Ö–Ω–∏–∫–∞", "–ö–æ–º–ø—å—é—Ç–µ—Ä—ã", "–¢–µ–ª–µ—Ñ–æ–Ω—ã"
        ]
        
        services_categories = [
            "–í–µ–±-—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞", "–î–∏–∑–∞–π–Ω", "–ö–æ–Ω—Å–∞–ª—Ç–∏–Ω–≥", "–û–±—É—á–µ–Ω–∏–µ", "–†–µ–º–æ–Ω—Ç",
            "–î–æ—Å—Ç–∞–≤–∫–∞", "–£–±–æ—Ä–∫–∞", "–ü–µ—Ä–µ–≤–æ–¥—ã", "–ë—É—Ö–≥–∞–ª—Ç–µ—Ä–∏—è", "–Æ—Ä–∏–¥–∏—á–µ—Å–∫–∏–µ —É—Å–ª—É–≥–∏",
            "–ú–µ–¥–∏—Ü–∏–Ω—Å–∫–∏–µ —É—Å–ª—É–≥–∏", "–ö—Ä–∞—Å–æ—Ç–∞", "–§–∏—Ç–Ω–µ—Å", "–¢—É—Ä–∏–∑–º", "–õ–æ–≥–∏—Å—Ç–∏–∫–∞"
        ]
        
        products_created = 0
        
        for company in companies:
            try:
                # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏
                for i in range(random.randint(1, products_per_company)):
                    is_service = random.choice([True, False])
                    
                    if is_service:
                        category = random.choice(services_categories)
                        product_name = f"{category} {random.choice(['–ü—Ä–æ—Ñ–µ—Å—Å–∏–æ–Ω–∞–ª—å–Ω—ã–π', '–≠–∫—Å–ø–µ—Ä—Ç–Ω—ã–π', '–ë–∞–∑–æ–≤—ã–π', '–ü—Ä–µ–º–∏—É–º'])}"
                        product_type = "SERVICE"
                        price = random.randint(1000, 50000)
                        unit = random.choice(["—á–∞—Å", "–¥–µ–Ω—å", "–º–µ—Å—è—Ü", "–ø—Ä–æ–µ–∫—Ç", "—É—Å–ª"])
                    else:
                        category = random.choice(goods_categories)
                        product_name = f"{category} {random.choice(['–ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π', '–ü—Ä–µ–º–∏—É–º', '–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π', '–≠–∫–æ–Ω–æ–º'])}"
                        product_type = "GOOD"
                        price = random.randint(100, 100000)
                        unit = random.choice(["—à—Ç", "–∫–≥", "–º", "–ª", "—É–ø–∞–∫"])
                    
                    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Ö–∞—Ä–∞–∫—Ç–µ—Ä–∏—Å—Ç–∏–∫–∏
                    characteristics = {
                        "–ö–∞—Ç–µ–≥–æ—Ä–∏—è": category,
                        "–°—Ä–æ–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è": f"{random.randint(1, 30)} –¥–Ω–µ–π",
                        "–ì–∞—Ä–∞–Ω—Ç–∏—è": f"{random.randint(6, 24)} –º–µ—Å—è—Ü–µ–≤",
                        "–ü–æ–¥–¥–µ—Ä–∂–∫–∞": "24/7" if is_service else "–†–∞–±–æ—á–∏–µ –¥–Ω–∏",
                        "–û–ø—ã—Ç": f"{random.randint(1, 15)} –ª–µ—Ç"
                    }
                    
                    # –°–æ–∑–¥–∞–µ–º slug
                    slug = f"product-{products_created + 1}"
                    
                    # –í—Å—Ç–∞–≤–ª—è–µ–º –ø—Ä–æ–¥—É–∫—Ç
                    product_id = await self.connection.fetchval("""
                        INSERT INTO products (
                            name, slug, description, article, type, price, images, characteristics,
                            is_hidden, is_deleted, unit_of_measurement, company_id, created_at, updated_at
                        ) VALUES ($1, $2, $3, $4, $5, $6, $7, $8, $9, $10, $11, $12, NOW(), NOW())
                        RETURNING id
                    """,
                        product_name,
                        slug,
                        f"{product_name}. –ö–∞—á–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —Ç–æ–≤–∞—Ä/—É—Å–ª—É–≥–∞ —Å –≥–∞—Ä–∞–Ω—Ç–∏–µ–π –∫–∞—á–µ—Å—Ç–≤–∞.",
                        f"ART-{random.randint(100000, 999999)}",
                        product_type,
                        price,
                        "[]",
                        json.dumps(characteristics),
                        False,
                        False,
                        unit,
                        company['id']
                    )
                    
                    products_created += 1
                    
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø—Ä–æ–¥—É–∫—Ç–∞ –¥–ª—è –∫–æ–º–ø–∞–Ω–∏–∏ {company['id']}: {e}")
                continue
        
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {products_created} —Ç–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥")
        return products_created

async def main():
    populator = RealisticDataPopulator()
    
    try:
        await populator.connect()
        await populator.load_cities_data()
        await populator.clear_existing_data()
        
        companies_count = await populator.create_companies(100)
        products_count = await populator.create_products(companies_count, 3)
        
        print(f"\nüéâ –ì–æ—Ç–æ–≤–æ!")
        print(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:")
        print(f"   - –ö–æ–º–ø–∞–Ω–∏–π: {companies_count}")
        print(f"   - –¢–æ–≤–∞—Ä–æ–≤ –∏ —É—Å–ª—É–≥: {products_count}")
        print(f"   - –ì–æ—Ä–æ–¥–æ–≤ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–æ: {len(populator.cities)}")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
    finally:
        await populator.disconnect()

if __name__ == "__main__":
    asyncio.run(main())
