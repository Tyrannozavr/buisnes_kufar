#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∑–∞–ø–æ–ª–Ω–µ–Ω–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º –Ω–∞–±–æ—Ä–æ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö
–°–æ–∑–¥–∞–µ—Ç 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π, 10 –∫–æ–º–ø–∞–Ω–∏–π, —Ç–æ–≤–∞—Ä—ã, —É—Å–ª—É–≥–∏ –∏ –æ–±—ä—è–≤–ª–µ–Ω–∏—è
"""

import asyncio
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.append(str(Path(__file__).parent))

from seed_database import DatabaseSeeder
from app.db.base import AsyncSessionLocal


async def quick_seed():
    """–ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –º–∏–Ω–∏–º–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏"""
    print("üöÄ –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö...")
    print("üìä –°–æ–∑–¥–∞—Å—Ç—Å—è:")
    print("   - 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
    print("   - 10 –∫–æ–º–ø–∞–Ω–∏–π") 
    print("   - ~80 —Ç–æ–≤–∞—Ä–æ–≤")
    print("   - ~30 —É—Å–ª—É–≥")
    print("   - 200 –æ–±—ä—è–≤–ª–µ–Ω–∏–π")
    print()
    
    async with AsyncSessionLocal() as session:
        seeder = DatabaseSeeder()
        seeder.session = session
        
        # –û—á–∏—â–∞–µ–º –±–∞–∑—É
        print("üßπ –û—á–∏—Å—Ç–∫–∞ –¥–∞–Ω–Ω—ã—Ö...")
        await seeder._clear_database()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–ª—å–∫–æ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
        print("üë• –°–æ–∑–¥–∞–Ω–∏–µ 10 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        for i in range(10):
            from app.api.authentication.models.user import User
            import bcrypt
            import random
            from seed_database import FIRST_NAMES, LAST_NAMES, POSITIONS
            
            first_name = random.choice(FIRST_NAMES)
            last_name = random.choice(LAST_NAMES)
            email = f"{first_name.lower()}.{last_name.lower()}{i+1}@example.com"
            
            user = User(
                email=email,
                first_name=first_name,
                last_name=last_name,
                patronymic=random.choice(FIRST_NAMES) + "–æ–≤–∏—á" if random.choice([True, False]) else None,
                phone=f"+7 9{random.randint(10, 99)} {random.randint(100, 999)}-{random.randint(10, 99)}-{random.randint(10, 99)}",
                inn=f"{random.randint(1000000000, 9999999999)}",
                position=random.choice(POSITIONS),
                hashed_password=bcrypt.hashpw("password123".encode('utf-8'), bcrypt.gensalt()).decode('utf-8'),
                is_active=True
            )
            seeder.session.add(user)
            seeder.users.append(user)
        
        await seeder.session.flush()
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–º–ø–∞–Ω–∏–∏
        print("üè¢ –°–æ–∑–¥–∞–Ω–∏–µ 10 –∫–æ–º–ø–∞–Ω–∏–π...")
        await seeder._create_companies()
        
        # –°–æ–∑–¥–∞–µ–º —Ç–æ–≤–∞—Ä—ã
        print("üì¶ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–æ–≤–∞—Ä–æ–≤...")
        await seeder._create_products()
        
        # –°–æ–∑–¥–∞–µ–º —É—Å–ª—É–≥–∏
        print("üîß –°–æ–∑–¥–∞–Ω–∏–µ —É—Å–ª—É–≥...")
        await seeder._create_services()
        
        # –°–æ–∑–¥–∞–µ–º –æ–±—ä—è–≤–ª–µ–Ω–∏—è
        print("üì¢ –°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä—è–≤–ª–µ–Ω–∏–π...")
        await seeder._create_announcements()
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º
        await seeder.session.commit()
        
        print("‚úÖ –ë—ã—Å—Ç—Ä–æ–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!")
        seeder._print_statistics()


if __name__ == "__main__":
    asyncio.run(quick_seed())
