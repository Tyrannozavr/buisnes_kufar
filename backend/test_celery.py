#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è Celery –∑–∞–¥–∞—á
"""

import os
import sys
import asyncio
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
sys.path.insert(0, str(Path(__file__).parent))

from app.celery_app import celery_app
from app.tasks.cache_tasks import (
    update_product_city_cache,
    update_company_city_cache,
    update_cities_product_count,
    refresh_all_caches,
    clear_all_caches
)


def test_celery_connection():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ Celery"""
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å Celery
        inspect = celery_app.control.inspect()
        stats = inspect.stats()
        
        if stats:
            print("‚úÖ Celery –ø–æ–¥–∫–ª—é—á–µ–Ω —É—Å–ø–µ—à–Ω–æ")
            print(f"üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –≤–æ—Ä–∫–µ—Ä–æ–≤: {len(stats)}")
            for worker, worker_stats in stats.items():
                print(f"   - {worker}: {worker_stats.get('total', 0)} –∑–∞–¥–∞—á –≤—ã–ø–æ–ª–Ω–µ–Ω–æ")
        else:
            print("‚ùå Celery –≤–æ—Ä–∫–µ—Ä—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
            return False
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ Celery: {e}")
        return False


def test_task_execution():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á"""
    try:
        print("\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á...")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä–æ—Å—Ç—É—é –∑–∞–¥–∞—á—É
        print("1. –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –≥–æ—Ä–æ–¥–∞–º...")
        task = update_cities_product_count.delay()
        print(f"   –ó–∞–¥–∞—á–∞ –∑–∞–ø—É—â–µ–Ω–∞ —Å ID: {task.id}")
        
        # –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        result = task.get(timeout=60)
        print(f"   ‚úÖ –†–µ–∑—É–ª—å—Ç–∞—Ç: {result}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞—á–∏: {e}")
        return False


def test_periodic_tasks():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏"""
    try:
        print("\n‚è∞ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏...")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–µ
        schedule = celery_app.conf.beat_schedule
        
        if schedule:
            print("‚úÖ –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã:")
            for task_name, task_config in schedule.items():
                print(f"   - {task_name}: {task_config['schedule']}")
        else:
            print("‚ùå –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üöÄ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ Celery –∑–∞–¥–∞—á")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    broker_url = os.getenv("CELERY_BROKER_URL", "amqp://admin:admin123@localhost:5672//")
    print(f"üì° Broker URL: {broker_url}")
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    if not test_celery_connection():
        print("\n‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ Celery")
        print("üí° –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ RabbitMQ –∑–∞–ø—É—â–µ–Ω –∏ Celery worker —Ä–∞–±–æ—Ç–∞–µ—Ç")
        return
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
    test_periodic_tasks()
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞—á
    test_task_execution()
    
    print("\n‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ")


if __name__ == "__main__":
    main()
